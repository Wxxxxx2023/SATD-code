JRu,positive,todo we loose encoding information here fix it
JRu,positive,todo we should use implicit nil for body but problem punt til later
JRu,positive,todo numeric new works in ruby and it does here too however trying to use that instance in a numeric operation should generate an argumenterror doing this seems so pathological i do not see the need to fix this now
JRu,positive,todo adding implicit nils caused multiple problems in compiler revist after landing assert bodynode null bodynode is not null
JRu,positive,todo take bigdecimal mode into account
JRu,positive,todo full precision remainder is x slower than mri
JRu,positive,fixme for some reason this dispatcher causes a verifyerror classclass dispatcher callbackfactory createdispatcher classclass
JRu,positive,fixme i doubt any of the constants referenced in this method are ever redefined should compare to the known values rather than do an expensive constant lookup
JRu,positive,todo rewriter and compiler assume case when empty expression in mri this is just a when assert casenode null casenode is not null
JRu,positive,todo do not require pop
JRu,positive,xxx wrong but will have to do for now
JRu,positive,todo do not require pop
JRu,positive,todo we should use implicit nil for body but problem punt til later
JRu,positive,todo do not require pop
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,todo do not require pop
JRu,positive,important receive the block argument before the opt and splat args this is so that the arg can be encoded as  rest of the array  this wo not work if the block argument has not been received yet
JRu,positive,todo do not require pop
JRu,positive,fixme i got a bunch of npes when i did not check for nulls here how ?
JRu,positive,todo do not require pop
JRu,positive,sss fixme there are also differences in variable scoping between and ruby is the buggy semantics if i understand correctly the semantics of how this shadows other variables outside the block needs to be figured out during live var analysis
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,this was a getopt with one mandatory arg but it did not work so i am parsing it for now
JRu,positive,this is the result of a bug that left off all trailing arguments e g system ls dir would be seen as system ls
JRu,positive,fixme broken but behaving
JRu,positive,todo we overflow on large files we could increase to long to limit this but then the impl gets more involved since java io apis based on int means we have to chunk up a long into a series of int ops
JRu,positive,todo do not require pop
JRu,positive,if we outgrow our pushback stack then grow it this should only happen in pretty pathological cases
JRu,positive,todo do not require pop
JRu,positive,fixme arg may also be true false and nil and still be valid strangely enough protocol conversion is not happening in ruby on this arg ?
JRu,positive,todo proper sign
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,todo do not require pop
JRu,positive,todo in mri an explicit check for negative length is added here indexerror is raised when length is negative see ruby core for more details new note this is actually under re evaluation see ruby core 
JRu,positive,todo do not require pop
JRu,positive,enebo very wrong
JRu,positive,todo do not require pop
JRu,positive,fixme if we terminate immediately this appears to break while in method arguments we need to push a nil for the cases where we will never enter the body
JRu,positive,fixme if we terminate immediately this appears to break while in method arguments we need to push a nil for the cases where we will never enter the body
JRu,positive,the following constants capture pre known static call sites jruby implementations of methods of ruby classes sss fixme note that compiler impl basebodycompiler is using op match for match and and op match for match is this a bug there ?
JRu,positive,todo do not require pop
JRu,positive,sss fixme this does not preserve original order of when clauses we could consider preserving the order or maybe not since we would have to sort the constants first in any case for outputing jump tables in certain situations add body to map for emitting later
JRu,positive,todo do not require pop
JRu,positive,sss fixme why is the for node being built using closures and not as a regular loop with branches ? this has implications on inlining implementations of closures next break etc when each and the block it consumes are inlined together in the caller the loop from the each should become a normal loop without any closures but in this implementation of for we replace one closure with another
JRu,positive,todo do not require pop
JRu,positive,synchronized method per jruby unsafe double checked locking fixme synchronization is still wrong in cp code
JRu,positive,todo do not require pop
JRu,positive,vulture thread will periodically expunge dead entries entries are also expunged during  put  operations this is designed to cover the case where many objects are created initially followed by limited put activity fixme disabled below pending resolution of finalization issue
JRu,positive,todo do not require pop
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,todo do not require pop
JRu,positive,fixme we are assuming that original string will be raw bytes if ku is provided this will not be true but that is ok for now deal with that when someone needs it
JRu,positive,todo do not require pop
JRu,positive,todo ruby locks the string here
JRu,positive,todo do not require pop
JRu,positive,todo rubicon testkernel dies without this line a cursory glance implies we falsely set to nil and this sets it back to something valid this should get fixed at the same time we address bug 
JRu,positive,todo do not require pop
JRu,positive,mri behavior this combination of flags is not allowed
JRu,positive,todo do not require pop
JRu,positive,zero args with block fixme omit args index subtract one from normal block index
JRu,positive,todo do not require pop
JRu,positive,fixme it may be possible to killpg on systems which support it posix library needs to tell whether a particular method works or not
JRu,positive,todo do not require pop
JRu,positive,todo this code effectively disables all inspection based optimizations none of them are safe yet
JRu,positive,todo do not require pop
JRu,positive,fixme no argument seems to work for k in mri plus this should not siphon off additional args  jruby k scripts foo  also better error processing
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,we are in eval with binding break out early fixme this is broken with the new backtrace stuff
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,fixme this is a system error based on errno
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo make sure it is really safe to not to copy it
JRu,positive,fixme not correct exception
JRu,positive,fixme we ca not guarantee this will always be a rubyio so the old code here is not safe
JRu,positive,dump the trace and continue this is currently only here for android which seems to have bugs in its enumeration logic http code google com p android issues detail ? id 
JRu,positive,fixme add at exit and finalizers to exit then make exit bang not call those
JRu,positive,todo need to isolate the current thread from class creation
JRu,positive,xxx actually only on windows
JRu,positive,enebo should frogger foo work it doesnt in linux ruby ?
JRu,positive,fixme ca not use static would interfere with other runtimes in the same jvm
JRu,positive,todo anything threads attached to original fd are notified of the close see rb thread fd close
JRu,positive,todo this is an freopen in mri this is close but not quite the same
JRu,positive,todo ruby locks the string here
JRu,positive,fixme check how ruby handles this
JRu,positive,todo full precision divmod is x slower than mri
JRu,positive,fixme i m not sure this is right but the old code returned the undef which definitely is not right
JRu,positive,enebo very wrong
JRu,positive,fixme mri has special case for constants here
JRu,positive,fixme throw the right argumenterror is if the class is missing or if it is a module
JRu,positive,fixme this is not quite right it should not evaluate the value if it is going to throw the error
JRu,positive,todo we should use implicit nil for body but problem punt til later
JRu,positive,todo we should use implicit nil for body but problem punt til later
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,get value from current scope or one of its captured scopes fixme block variables are not getting primed to nil so we need to null check those until we prime them properly also add assert back in param offset zero indexed value that represents where variable lives param depth how many captured scopes down this variable should be set return the value here
JRu,positive,todo do not require pop
JRu,positive,fixme x flag not supported case  x  break
JRu,positive,fixme this is causing a verification error for some reason nilclass dispatcher callbackfactory createdispatcher nilclass
JRu,positive,walk up the scope tree right now as much as possible to avoid run time walking sss fixme any reason why this might break in the presence of ruby is dynamic resolution ? what might break ?
JRu,positive,todo do not require pop
JRu,positive,walk up the scope tree right now as much as possible to avoid run time walking sss fixme any reason why this might break in the presence of ruby is dynamic resolution ? what might break ?
JRu,positive,fixme errno descriptions from constantine on windows are not useful at the moment
JRu,positive,todo do not require pop
JRu,positive,fixme this should reset to what it was before
JRu,positive,sss fixme incorect
JRu,positive,fixme vulture daemon thread prevents finalization find alternative approach vulture start
JRu,positive,fixme this seems like a good assertion but it breaks compiled code and the code seems to run without it assert currentmodule null ca not push null rubyclass
JRu,positive,are there are available data flow facts to run this problem ? sss fixme silly optimization ?
JRu,positive,sss fixme for constant arrays we should never get here
JRu,positive,fixme this is wrong
JRu,positive,fixme may need to broaden for ipv ip address strings
JRu,positive,todo sys fail
JRu,positive,are there are available data flow facts to run this problem ? sss fixme silly optimization ?
JRu,positive,sss fixme verify semantics of this instruction
JRu,positive,fixme this is not quite right it should not evaluate the value if it is going to throw the error
JRu,positive,todo full precision remainder is x slower than mri
JRu,positive,fixme broken but behaving
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,todo do not require pop
JRu,positive,we basically ignore protocol let someone report it
JRu,positive,sss fixme is this correct ?
JRu,positive,fixme i use a for block to implement end node because we need a proc which captures its enclosing scope forblock now represents these node and should be renamed
JRu,positive,sss fixme is the ordering correct ? poll before next
JRu,positive,we use a highly uncommon string to represent the paragraph delimiter soln not worth it
JRu,positive,add a self recv here todo is this right ?
JRu,positive,todo mri behavior call or add depending on the call but this leads to exceptions when floats are added see http blade nagaokaut ac jp cgi bin scat rb ruby ruby core return callcoerced context op b true this is mri behavior we will use ours for now thus providing an ability to add floats
JRu,positive,sss fixme is this correctly placed at the end of the loop iteration ?
JRu,positive,todo ruby reuses this logic for other write behavior by checking if it is an io and calling write again
JRu,positive,sss fixme where does this go ? m setlineposition arraynode getposition
JRu,positive,it would be nice and logical if exponent form behaved like e e and decimal form behaved like f but no such luck hence
JRu,positive,sss fixme these should get normally compiled or initialized some other way sss fixme parent super type info is incorrect these are just placeholders for now this needs to be updated with real class objects later
JRu,positive,todo not allocatable allocator is probably ok here confirm jruby 
JRu,positive,sss fixme i could make ir loop a scope too semantically it is a scope but functionally not sure if this is required yet
JRu,positive,this covers the rare case of lower case class names and thus will fail of the time fortunately we will only do this once per package name and seriously folks look into best practices
JRu,positive,sss fixme should this be a string literal or a string ? dummy class for the script
JRu,positive,todo should this be deprecated ? to be efficient internals should deal with rubyhash directly
JRu,positive,sss fixme does int suffice or do we need long ?
JRu,positive,modules are included with a shim class we must find that shim to handle super appropriately
JRu,positive,reset value map if this instruction is the start end of a basic block right now calls are considered hard boundaries for optimization and information cannot be propagated across them sss fixme rather than treat all calls with a broad brush what we need is to capture different attributes about a call uses closures known call target can modify scope etc this information is probably already present in the ast inspector
JRu,positive,todo determine whether we should perhaps store non singleton class in the implementationclass
JRu,positive,sss fixme correct ? where does closure arg come from ?
JRu,positive,fixme consider fixing node assign itself rather than single case
JRu,positive,sss fixme should i have a reference to the ir loop that is being retried ?
JRu,positive,temporary hack to handle non ruby values will come up with better solution shortly
JRu,positive,simplify the variables too to keep these variables in sync with what is actually used in the when clauses this is not required for correctness reasons but only for performance reasons
JRu,positive,must be called from main thread it is currently but this bothers me
JRu,positive,con fixme i do not know how to make case be an expression does that logic need to go here ?
JRu,positive,fixme legal here ? may want unsupportedoperationexception
JRu,positive,fixme this is an ugly hack to resolve jruby i m not proud of it
JRu,positive,something wrong we do not know the cwd todo is this behavior really desirable ? mov
JRu,positive,todo no java stringity
JRu,positive,fixme total hack to get flash in rails marshalling unmarshalling in session ok we need to totally change marshalling to work with overridden core classes
JRu,positive,todo this method is not present in mri
JRu,positive,fixme ideally javaobject instances should be marshallable which means that the javaobject metaclass should have an appropriate allocator jruby 
JRu,positive,todo public only ?
JRu,positive,fixme this should probably do some translation from ruby priority levels to java priority levels until we have green threads
JRu,positive,todo consider a better way of synchronizing
JRu,positive,using ioinputstream may not be the most performance way but it is easy
JRu,positive,fixme we should not be regenerating this over and over
JRu,positive,xxx this check previously used callmethod to check for equality between classes when scanning the hierarchy however the check may be safe we should only ever have one instance bound to a given type constant if it is found to be unsafe examine ways to avoid the call
JRu,positive,todo not allocatable allocator is probably ok here confirm jruby 
JRu,positive,todo why are we duplicating the constants here and then in file constants below ? file constants is included in io
JRu,positive,a cloned method now belongs to a new class set it todo make dynamicmethod immutable
JRu,positive,todo these were missing so we  re not handling them elsewhere ?
JRu,positive,todo cache ?
JRu,positive,fixme wtf is this ? why would these use the class ?
JRu,positive,todo figure out how this can happen and possibly remove
JRu,positive,fixme i do not like this
JRu,positive,fixme these descriptions should probably be moved out to constantine project which deals with all platform dependent constants
JRu,positive,fixme this below is temporary but its much safer for cow it prevents not shared strings with begin this allows now e g bytelist set not to be begin aware
JRu,positive,todo what about n arg ?
JRu,positive,fixme i think this chunk is equivalent to mri id name and not our public method id name make into method if used more than once
JRu,positive,todo cache ?
JRu,positive,fixme this is probably not very efficient since it loads all methods for each call
JRu,positive,hack in to replace usual readline with this
JRu,positive,if we get here we found a matching method use it todo choose narrowest method by continuing to search
JRu,positive,todo this is kinda gross
JRu,positive,fixme in order for thread to play well with the standard  new  behavior it must provide an allocator that can create empty object instances which initialize then fills with appropriate data
JRu,positive,these extra arrays are really unfortunate split some of these paths out to eliminate ?
JRu,positive,we clone dynamic scope because this will be a new instance of a block any previously captured instances of this block may still be around and we do not want to start overwriting those values when we create a new one enebo once we make self lastclass and lastmethod immutable we can remove duplicate
JRu,positive,todo protected methods this is going to require a rework of some of the mechanism
JRu,positive,if not overloaded we add a method that guesses at which signature to use todo just adding first one right now add in signature guessing logic
JRu,positive,sss fixme this should never get called for constant svalues
JRu,positive,todo this version is better than the hackish previous one windows behavior needs to be defined though i suppose this version could be improved more too todo etc passwd is also inadequate for macosx since it does not use etc passwd for regular user accounts
JRu,positive,fixme there is some code duplication here with rubyobject inspect
JRu,positive,for visibility checking without requiring frame self todo do not bother passing when fcall or vcall and adjust callsite appropriately
JRu,positive,fixme figure out why we get null sometimes
JRu,positive,hacky advance position to eat newline here
JRu,positive,need to reexamine this
JRu,positive,fixme this is currently only here because of some problems with iooutputstream writing to a bare runtime without a proper scope
JRu,positive,workaround for jruby 
JRu,positive,using iooutputstream may not be the most performance way but it is easy
JRu,positive,ignore bean does not get registered todo why does that bother me ?
JRu,positive,todo not allocatable allocator is probably ok here confirm jruby 
JRu,positive,enebo lots of optz in parser here
JRu,positive,fixme move out of this class
JRu,positive,in fact we should probably raise an error yes ?
JRu,positive,todo ary sort check should be done here
JRu,positive,todo get rid of this lax returns strict will throw
JRu,positive,bit risky if someone changes completor but useful for method calls
JRu,positive,todo the rest of this seeking to same position is unnecessary since we share a channel but some of this may be needed ?
JRu,positive,todo is this the right thing to do ?
JRu,positive,fixme this probably belongs in a different package
JRu,positive,fixme not very efficient
JRu,positive,we clone dynamic scope because this will be a new instance of a block any previously captured instances of this block may still be around and we do not want to start overwriting those values when we create a new one enebo once we make self lastclass and lastmethod immutable we can remove duplicate
JRu,positive,this is gross but java api is are not iso compliant at all
JRu,positive,todo is this correct ?
JRu,positive,workaround for jruby mri does not enter this production for some reason
JRu,positive,create block for this iter node fixme we should not use the current scope if it is not actually from the same hierarchy of static scopes
JRu,positive,sss fixme do we need to check if l is same as whatever popped ?
JRu,positive,sss fixme where is this set up ? how is this diff from classvardeclnode ? ?
JRu,positive,fixme do we need the check or does main java not call this they should consolidate
JRu,positive,fixme this table will get moved into posix library so we can get all actual supported signals this is a quick fix to support basic signals until that happens
JRu,positive,fixme this worries me a bit since it could allocate a lot with a large newlength
JRu,positive,todo this filtering is kind of gross it would be nice to get some parser help here
JRu,positive,todo decompose getjavapackagemodule so we do not parse fullname
JRu,positive,this is gross but java api is are not iso compliant at all
JRu,positive,fixme get rid of laziness and handle restricted access elsewhere
JRu,positive,todo for now we use a faithful reimplementation of mri is algorithm but should use utf encoding facilities from joni once it starts prefroming utf content validation
JRu,positive,if we do not have opt args start after args they will be assigned later this is for crap like def foo a b true which numbers b before a fixme only starting after required args since opt args may access others and rest args conflicts with compileroot using to indicate signature
JRu,positive,fixme determine if a real allocator is needed here do people want to extend javaclass ? do we want them to do that ? can you class new javaclass ? should you be able to ? todo not allocatable allocator is probably ok here since we do not intend for people to monkey with this type and it ca not be marshalled confirm jruby 
JRu,positive,grrr arghh want to subclass sun misc floatingdecimal but ca not so we must do all this the next lines of code which has already been done by floatingdecimal
JRu,positive,fixme do we really want  declared  methods ? includes private protected and does not include superclass methods also the getdeclared calls may throw securityexception if we  re running under a restrictive security policy
JRu,positive,small hack to save a cast later on
JRu,positive,this is perhaps innefficient timewise ? optimal spacewise
JRu,positive,todo confirm expected args are irubyobject or similar
JRu,positive,there is not a compelling reason to keep javaclass instances in a weak map any proxies created are were kept in a non weak map so in most cases they will stick around anyway and some good reasons not to javaclass creation is expensive for one many lookups are performed when passing parameters to from methods etc todo faster custom concurrent map
JRu,positive,todo check for java reserved names and raise exception if encountered
JRu,positive,fixme jruby ends up with condition returning null quick fix until i can dig into it
JRu,positive,workaround for a bug in sun is jdk x see http bugs sun com bugdatabase view bug do ? bug id 
JRu,positive,fixme weakref rb also does caller here for the backtrace
JRu,positive,fixme remove this from grammars
JRu,positive,todo it is perhaps just a coincidence that all the channels for which we should raise are instanceof selectablechannel since stdio is not so this bothers me slightly con
JRu,positive,fixme not sure what the semantics of transfer are cfiber definefastmethod transfer cb getfastoptmethod transfer
JRu,positive,fixme this is pretty gross we should have a cleaner initialization that does not depend on package visible fields and ideally is atomic probably using an immutable structure we replace all at once lazy null when no groups defined
JRu,positive,this is a dummy scope we should find a way to make that more explicit
JRu,positive,fixme resolve what the hell is going on
JRu,positive,rb obj id return the internal id of an object fixme should this be renamed to match its ruby name ?
JRu,positive,again should not happen todo might want to throw exception instead
JRu,positive,fixme maybe not best place but move it to a good home
JRu,positive,todo not allocatable allocator may be ok here but it is unclear how structs work with marshalling confirm behavior and ensure we  re doing this correctly jruby 
JRu,positive,todo should next and return also catch here ?
JRu,positive,we always prepend an org jruby proxy package to the beginning because java and javax packages are protected and signed jars prevent us generating new classes with those package names see jruby 
JRu,positive,todo we should be able to optimize this quite a bit post javaclass already has all the methods organized by method name the next version supporting protected methods fields will have them organized even further so collectmethods here can just lookup the overridden methods in the javaclass map should be much faster
JRu,positive,index for the item this could probably be more efficient bailing out on assigning args past the end ?
JRu,positive,todo make more efficient by not creating irubyarray
JRu,positive,rb mod remove cvar fixme any good reason to have two identical methods ? same as remove class variable
JRu,positive,from dup setup rb copy generic ivar from dup setup here unlikely
JRu,positive,if we do not have opt args start after args they will be assigned later this is for crap like def foo a b true which numbers b before a fixme only starting after required args since opt args may access others and rest args conflicts with compileroot using to indicate signature
JRu,positive,if it is a single arg when but contains an array we know it is a real literal array fixme this is a gross way to figure it out parser help similar to yield argument passing expandarguments would be better
JRu,positive,todo only setaccessible to account for pattern found by accessing constants included from a non public interface aka java util zip zipconstants being implemented by many classes
JRu,positive,not intended to be called directly by users private old todo from ruby code this should be implemented in javaclass java where we can check for reserved ruby names conflicting methods etc
JRu,positive,fixme do not allow multiple threads to do this at once
JRu,positive,todo bleeding runtime into parser arity may be should be in parser to keep bleeding oneway
JRu,positive,rb ary push m fixme whis is this named push m ?
JRu,positive,todo this probably is not the best hack but it works until we can have different root frame setup for easily
JRu,positive,todo at least parsersupport attrset passes argsnode as null implicitnil is wrong magic for setupargs since it will irubyobject nil so we need to figure out a nice fast null pattern for setupargs assert argsnode null receivernode is not null
JRu,positive,hack in order to have stdout err act like ttys and flush always we set anything assigned to stdout stderr to sync
JRu,positive,fixme not very efficient
JRu,positive,todo people extending gzipwriter reader will break find better way here
JRu,positive,fixme set up a call configuration for this
JRu,positive,process streams get channel newchannel ed into filechannel but are not actually seekable so instead of just the isseekable check doing instanceof filechannel we must also add this boolean to check which we set to false when it is known that the incoming channel is from a process fixme this is gross and it is nio is fault for not providing a nice way to tell if a channel is really seekable
JRu,positive,again should not happen todo might want to throw exception instead
JRu,positive,fixme somehow i  d feel better if this could get the appropriate var index from the argumentnode
JRu,positive,fixme can get optimized for ieqlnode
JRu,positive,todo rounding mode should not be hard coded see mode
JRu,positive,fixme moved this here to get what is obviously a utility method out of irubyobject perhaps security methods should find their own centralized home at some point
JRu,positive,fixme if nativeexception is expected to be used from ruby code it should provide a real allocator to be used otherwise class new will fail as will marshalling jruby 
JRu,positive,object to a is obsolete we match ruby is hack until to a goes away then we can remove this hack too
JRu,positive,todo callback for value would be more efficient but unlikely to be a big cost constants are rarely assigned
JRu,positive,fixme this should go somewhere more generic maybe idutil
JRu,positive,sss fixme move this code to some utils area or probably there is already a method for this in some jruby utils class holy cow just to append two darned arrays
JRu,positive,todo set our metaclass to target is class i e scary
JRu,positive,add  new  with full signature so it is guaranteed to be directly accessible todo no need for this to be a full formal jvm signature
JRu,positive,context is null wipe out the softreference this could be done with a reference queue
JRu,positive,todo remove
JRu,positive,fixme not very efficient
JRu,positive,fixme big fat hack here because scope names are expected to be interned strings by the parser
JRu,positive,todo this is actually now returning the scope of whoever called method to proc which is obviously wrong but there is no scope to provide for many methods it fixes jruby but needs a better solution
JRu,positive,author headius fixme convert to enum ?
JRu,positive,the following three methods must be defined fast since they expect to modify the current frame i e they expect no frame will be allocated for them jruby 
JRu,positive,todo not allocatable allocator is probably ok here since we do not intend for people to monkey with this type and it ca not be marshalled confirm jruby 
JRu,positive,sss fixme can this return anything other than nil ?
JRu,positive,xxx const lookup can trigger const missing is that enough to warrant it always being executed ?
JRu,positive,for visibility checking without requiring frame self todo do not bother passing when fcall or vcall and adjust callsite appropriately
JRu,positive,todo should frozen error have its own distinct class ? if not should more share ?
JRu,positive,todo only used by interface implementation eliminate it
JRu,positive,fixme null check is removable once we figure out how to assign to unset named block args
JRu,positive,for jruby when met choose cet timezone to work around joda
JRu,positive,fixme this is gross do not do this
JRu,positive,fixme i think we need these pushed somewhere ?
JRu,positive,sss fixme deprecated going forward all instructions should come from the cfg
JRu,positive,todo should probably apply the null object pattern for a non allowed class rather than null
JRu,positive,todo should next and return also catch here ?
JRu,positive,yow this is still ugly
JRu,positive,add method with full signature so it is guaranteed to be directly accessible todo no need for this to be a full formal jvm signature
JRu,positive,fixme this version is faster than the previous but both suffer from a crucial flaw it is impossible to create an objectspace with an iterator that does not either a hold on to objects that might otherwise be collected or b have no way to guarantee that a call to hasnext will be correct or that a subsequent call to next will produce an object for our purposes for now this may be acceptable
JRu,positive,fixme clearing read buffer here is this appropriate ?
JRu,positive,todo specifying soft refs may want to compare memory consumption behavior with weak refs specify weak in place of soft below
JRu,positive,fixme lose syntactical elements here and others like this
JRu,positive,enebo totally weird naming in mri is not allocated and is a local var name
JRu,positive,fixme this does not actually support anything but string
JRu,positive,up to ten stuff into tmp locals load in reverse order and assign fixme there is probably a slightly smarter way but is it important ?
JRu,positive,xxx do something ?
JRu,positive,todo only setaccessible to account for pattern found by accessing constants included from a non public interface aka java util zip zipconstants being implemented by many classes todo not sure we need this at all since we only expose public fields field setaccessible true
JRu,positive,fixme we want to eliminate these type casts when possible
JRu,positive,todo decompose getjavapackagemodule so we do not parse fullname
JRu,positive,hack force clinit to be created
JRu,positive,fixme if true array is common enough we should pre allocate and stick somewhere
JRu,positive,optional args so we have irubyobject todo confirm
JRu,positive,todo this is almost rubymodule instance methods on the metaclass perhaps refactor
JRu,positive,fixme added this because marshal spec seemed to reconstitute objects without calling datawrapstruct this resulted in object being null after unmarshalling
JRu,positive,todo factor this chunk as in mri yarv getaster
JRu,positive,todo ary sort check should be done here
JRu,positive,exit monitor before making call fixme this not being in a finally is a little worrisome
JRu,positive,self args sss fixme verify that this is correct
JRu,positive,this is for jruby since after a suspend the terminal seems to need to be reinitialized since we ca not easily detect suspension initialize after every readline probably not fast but this is for interactive terminals anyway so who cares ?
JRu,positive,todo do above but not below for additional newline nodes
JRu,positive,sss fixme receiver this is the class meta object basically ? operand receiver build defsnode getreceivernode s
JRu,positive,fixme this whole thing could probably be implemented as a module and mixed into appropriate classes especially if it uses either ioinput outputstream or is smart about the kind of io like object it is being used against
JRu,positive,fixme bit of a kludge here non interface classes assigned to both class and module fields simplifies proxy extender code will go away when ji is overhauled and proxy extenders are deprecated
JRu,positive,fixme what should these really be ? numeric ? assert x instanceof rubycomplex y instanceof rubycomplex
JRu,positive,we  re depending on the side effect of the load which loads the class but does not turn it into a script i do not like it but until we restructure the code a bit more we will need to quietly let it by here
JRu,positive,fixme we should also support orgs that use capitalized package names including embarrassingly the one i work for but this should be enabled by a system property as the expected default behavior for an upper case value should be and is to treat it as a class name and raise an exception if it is not found
JRu,positive,index for the item this could probably be more efficient bailing out on assigning args past the end ?
JRu,positive,todo this version differs from ioctl by checking whether fcntl exists and raising notimplemented if it does not perhaps no difference for us ?
JRu,positive,fixme this is temporary since the variable compilers assume we want args already on stack for assignment we just pop and continue with args logic
JRu,positive,todo eliminate ?
JRu,positive,todo confirm expected args are irubyobject or similar
JRu,positive,todo handle writing into original buffer better
JRu,positive,this is a fairly specific hack for empty string but it does the job
JRu,positive,xxx this constructor is a hack to implement the end syntax converting a reader back into an inputstream does not generally work
JRu,positive,method has more than lines we will need to split it and therefore need to use a heap based scope
JRu,positive,the implementations of these are all bonus see todo above i was going to throw an error from these but it appears to be the wrong place to do it
JRu,positive,todo confirm expected args are irubyobject or similar
JRu,positive,entry exists proxy does not match replace this could happen if old proxy was gc ed todo raise exception if stored proxy is non null ? not gc ed
JRu,positive,todo better algorithm to set precision needed
JRu,positive,sss fixme used anywhere ? i do not see calls to this anywhere public operand builddasgnassignment node node ir scope s dasgnnode dasgnnode dasgnnode node s getvariablecompiler assignlocalvariable dasgnnode getindex dasgnnode getdepth
JRu,positive,todo make this more intelligible value
JRu,positive,todo split this into two sub classes so that name and constnode can be specified seperately
JRu,positive,not sure how well this works but it works much better than just currenttimemillis by itself
JRu,positive,fixme this is copied code from rubyarray both re struct and array should share one impl this is also hacky since i construct ruby objects to access ruby arrays through aref instead of something lower
JRu,positive,fixme no i do not like it
JRu,positive,ignore bean does not get registered todo why does that bother me ?
JRu,positive,fixme this is currently only here because of some problems with iooutputstream writing to a bare runtime without a proper scope
JRu,positive,arguments compilers always create irubyobject but we want to use rubyarray concat here fixme as a result this is not efficient since it creates and then later unwraps an array
JRu,positive,sss fixme what is the difference between classvarasgnnode classvardeclnode
JRu,positive,fixme set up a callconfiguration for this
JRu,positive,todo reads writes from frame todo information on scoping todo visibility ?
JRu,positive,fixme somehow i  d feel better if this could get the appropriate var index from the argumentnode
JRu,positive,fixme this is almost entirely duplicated from main java
JRu,positive,we might need to perform a dst correction
JRu,positive,fixme this is currently only here because of some problems with iooutputstream writing to a bare runtime without a proper scope
JRu,positive,create block for this iter node fixme we should not use the current scope if it is not actually from the same hierarchy of static scopes
JRu,positive,fixme how much more obtuse can this be ? heredoc already parsed this and saved string do not parse just return
JRu,positive,this needs to be split since conditional calling inherited does not fit standard ruby semantics
JRu,positive,xxx again screwy evaling under previous frame is scope
JRu,positive,sss fixme maybe this is not really a concern after all nesting level of this scope in the lexical nesting of scopes in the current file this is not to be confused with semantic nesting of scopes across files consider this code in a file f class m m m c end so c is at lexical nesting level of the file script is at in the file  f  semantically it is at level m m m are at this is primarily used to ensure that variable names do not clash i e definition of v in a closure should not override the use of v from the parent scope private int lexicalnestinglevel
JRu,positive,ignore bean does not get registered todo why does that bother me ?
JRu,positive,actual type does not exactly match method return type re get converter fixme when the only autoconversions are primitives this wo not be needed
JRu,positive,fixme we should probably still be dyncalling  write  here
JRu,positive,fixme finalizer should be dupped here
JRu,positive,do not bother to check if final method it wo not be there not generated ca not be
JRu,positive,todo generalize this type checking code into irubyobject helper
JRu,positive,fixme needs to be rethought
JRu,positive,ruby constants for strings should this be moved somewhere else ?
JRu,positive,let is only generate methods for those the user may actually intend to override that includes any defined in the current class and any ancestors that are also javaproxyclasses but none from any other ancestor classes methods defined in mixins will be considered intentionally overridden except those from kernel java and javaproxymethods as well as enumerable todo may want to exclude other common mixins ?
JRu,positive,fixme i do not like the null checks here
JRu,positive,invoke callmethodmissing method directly todo this could be further optimized since some dsls hit method missing pretty hard
JRu,positive,todo confirm expected args are irubyobject or similar
JRu,positive,todo this is really ineffient and potentially a problem everytime anyone require is something we should try to make loadpath a special array object
JRu,positive,if we get here we found a matching method use it todo choose narrowest method by continuing to search
JRu,positive,rb obj id return the internal id of an object fixme should this be renamed to match its ruby name ?
JRu,positive,fixme why was this using a fullfunctioncallbackmethod before that did callsuper ?
JRu,positive,if body is a rescue node inspect its pieces separately to avoid it disabling all optz todo this is gross
JRu,positive,fixme this does not have exact same semantics as rubyarray join but they probably could be consolidated perhaps as join args sep dochomp
JRu,positive,lame generics issues making segment class static and manually inserting cache reference to work around various problems generically referencing methods vars across classes
JRu,positive,fixme not very efficient
JRu,positive,fixme this determine module is in a strange location and should somehow be in block
JRu,positive,todo ? i think this ends up propagating from normal java exceptions sys fail openfile getpath
JRu,positive,this seems unlikely to happen unless it is a totally bogus fileno so do we even need to bother trying to create one ?
JRu,positive,todo turn off the negative ? will return in lax mode
JRu,positive,todo list sublist from to clear is supposed to clear the sublist from the list how can we support this operation ?
JRu,positive,sss fixme what is the difference between classvarasgnnode classvardeclnode
JRu,positive,see note below re field kludge
JRu,positive,we  re not setting the provider or anything but it seems that bouncycastle does some internal things in its provider is constructor which require it to be executed in a secure context ideally this hack should be removed see jruby and this bc bug http www bouncycastle org jira browse bja 
JRu,positive,this is a rather ugly hack but similar to mri see hash c ruby setenv and similar in mri we search all keys for a case insensitive match and use that
JRu,positive,todo wrong get interfaces from class
JRu,positive,todo make callcoerced work in block context then fix downto step and upto
JRu,positive,fixme the code below is a copy of rubyio puts and we should avoid copy paste
JRu,positive,install invokedynamic bootstrapper todo need to abstract this setup behind another compiler interface
JRu,positive,fixme inefficient constructing a bignum just for dumping ?
JRu,positive,todo ruby does not seem to care about invalid numeric mode values i am not sure if ruby overflows here also
JRu,positive,fixme obvious issue that not all platforms can display all attributes ugly hacks using generic posix library makes pushing inspect behavior into specific system impls rather painful
JRu,positive,rb copy generic ivar from dup setup here unlikely
JRu,positive,fixme this really ought to be in clinit but it does not matter much
JRu,positive,todo callback for value would be more efficient but unlikely to be a big cost constants are rarely assigned
JRu,positive,using iochannel may not be the most performant way but it is easy
JRu,positive,todo this should entry into error handling somewhere
JRu,positive,todo make this do specific arity calling
JRu,positive,fixme legal here ? may want unsupportedoperationexception
JRu,positive,fixme this is an ugly hack to resolve jruby i m not proud of it
JRu,positive,for visibility checking without requiring frame self todo do not bother passing when fcall or vcall and adjust callsite appropriately
JRu,positive,sss fixme what happens to the add class in this case ? ?
JRu,positive,sss fixme is this correct ?
JRu,positive,fixme big fat hack here because scope names are expected to be interned strings by the parser
JRu,positive,ignore bean does not get registered todo why does that bother me ?
JRu,positive,sss fixme are we guaranteed that we splats dont head to multiple assignment nodes i e a b ?
JRu,positive,todo not allocatable allocator is probably ok here confirm jruby 
JRu,positive,todo catch exception if constant is already set by other thread
JRu,positive,todo this version differs from ioctl by checking whether fcntl exists and raising notimplemented if it does not perhaps no difference for us ?
JRu,positive,todo implement tty ? and isatty we have no real capability to determine this from java but if we could set tty status then we could invoke jruby differently to allow stdin to return true on this this would allow things like cgi rb to work properly
JRu,positive,fixme we should be getting this from the runtime rather than assume none ? return runtime getencodingservice getencoding runtime getdefaultexternalencoding
JRu,positive,object to a is obsolete we match ruby is hack until to a goes away then we can remove this hack too
JRu,positive,end hack
JRu,positive,todo this is not an exact port of mri is pipe behavior so revisit
JRu,positive,todo protected methods this is going to require a rework of some of the mechanism
JRu,positive,fixme this is currently only here because of some problems with iooutputstream writing to a bare runtime without a proper scope
JRu,positive,todo factor this chunk as in mri yarv getaster
JRu,positive,fixme what should this really be ? assert x instanceof rubycomplex
JRu,positive,fixme this is not right for within ensured rescued code
JRu,positive,sss fixme token can be final for a method implying that the token is only for this particular implementation of the method but if the mehod is modified we create a new method object which in turn gets a new token what makes sense ? ? intuitively it seems the first one but let us see current code version token for this method can change during execution as methods get redefined
JRu,positive,todo it would be nice to throw a better error for this
JRu,positive,set up a field for the cacheentry todo make this an array so it is not as much class metadata similar to abstractscript stuff
JRu,positive,todo it would be nice to throw a better error for this
JRu,positive,todo newtypeerror does not offer enough for ruby error string
JRu,positive,sss fixme i added this in is this correct ?
JRu,positive,upper case package name todo top level upper case package was supported in the previous ruby based implementation so leaving as is see note at getproxyorpackageunderpackage re future approach below the top level
JRu,positive,todo wire into new exception handling mechanism
JRu,positive,todo this is also defined in the metaclass too consolidate somewhere
JRu,positive,fixme constdecl could be two seperate classes or done differently since constnode and name never exist at the same time
JRu,positive,todo not allocatable allocator is probably ok here since we do not intend for people to monkey with this type and it ca not be marshalled confirm jruby 
JRu,positive,fixme finalizer should be dupped here
JRu,positive,todo not allocatable allocator is probably ok here since we do not intend for people to monkey with this type and it ca not be marshalled confirm jruby 
JRu,positive,todo number formatting here mri uses g api is a must ?
JRu,positive,todo need to get this back into the method signature now is too late
JRu,positive,super calls from proxies must use reflected method fixme possible to make handles do the superclass call ?
JRu,positive,optional args so we have irubyobject todo confirm
JRu,positive,todo better error handling
JRu,positive,fixme not very efficient
JRu,positive,sss fixme should this be operand or compoundstring ? can it happen that symbols are built out of other than compound strings ? or can it happen during optimizations that this becomes a generic operand ?
JRu,positive,fixme we should really not be creating the dynamic scope for the root of the ast before parsing this makes us end up needing to readjust this dynamic scope coming out of parse and for local static scopes it will always happen because of and fixme because we end up adjusting this after the fact we ca not use any of the specific size scopes
JRu,positive,todo wire into new exception handling mechanism
JRu,positive,todo not sure that we should skip calling join altogether thread join has some implications for java memory model etc
JRu,positive,hack to get right style for input
JRu,positive,if variables were added then we may need to grow the dynamic scope to match the static one fixme make this so we only need to check this for blockscope null we cannot currently since we create the dynamicscope for a localstaticscope before parse begins refactoring should make this fixable
JRu,positive,sss fixme this method at least in the context of multiple assignment is a little weird it calls regular to ary on the object but if it encounters a method missing the value is inserted into an element array try a b c first then define fixnum to ary method and try it again ex http gist github com 
JRu,positive,fixme potentially could just use bytelist here ?
JRu,positive,fixme this is currently only here because of some problems with iooutputstream writing to a bare runtime without a proper scope
JRu,positive,fixme consider fixing node assign itself rather than single case
JRu,positive,this is perhaps innefficient timewise ? optimal spacewise
JRu,positive,end hack
JRu,positive,ignore job was cancelled fixme is this ok ?
JRu,positive,regular division with some default precision todo proper algorithm to set the precision
JRu,positive,todo exec should replace the current process this could be possible with jna
JRu,positive,sometimes the value can be retrieved at compile time if we succeed nothing like it we might not for the following reasons the constant is missing the reference is a forward reference the constant is value is only known at run time on first access but this is runtime is not it ? ? our compiler is not able to right away infer that this is a constant sss fixme the operand can be a literal array range or hash hence operand because array range and hash derive from operand and not constant is there a way to fix this impedance mismatch ? it should be possible to handle the forward reference case by creating a new forwardreference operand and then inform the scope of the forward reference which the scope can fix up when the reference gets defined at code gen time if the reference is unresolved when a value is retrieved for the forward ref and we get a null we can throw a constmissing exception not sure
JRu,positive,fixme not allocatable allocator is probably not right here since we might eventually want javaarray to be marshallable jruby 
JRu,positive,workaround for jruby mri does not enter this production for some reason
JRu,positive,if body is a rescue node inspect its pieces separately to avoid it disabling all optz todo this is gross
JRu,positive,todo this is probably bad
JRu,positive,fixme do we really want  declared  methods ? includes private protected and does not include superclass methods
JRu,positive,fixme should not need java ovrd methods just query locally defined methods
JRu,positive,fixme document difference between warn and warning or rename one better
JRu,positive,fixme only f setfl and f getfl is current supported fixme only nonblock flag is supported fixme f setfl and f setfd are treated as the same thing here for the case of dup fd we should actually have f setfl only affect one it is unclear how well we do but this todo is here to at least document that we might need to do more work here mostly setfl is for mode changes which should persist across fork boundaries since jvm has no fork this is not a problem for us
JRu,positive,todo call config with scope but no frame
JRu,positive,todo ruby truncates string to specific size here but our bytelist should handle this already ?
JRu,positive,todo clone setup here
JRu,positive,todo must override in rubymodule to pick up constants
JRu,positive,todo non strict option
JRu,positive,todo adjust length so it wo not fall in the middle of a multi byte character mri is sprintf c uses tables in a modified version of regex c which assume some particular encoding for a given installation application see regex c re mbcinit in ruby p this is only an issue if the user specifies a precision that causes the string to be truncated the same issue would arise taking a substring of a bytelist backed rubystring
JRu,positive,fixme r logic needed
JRu,positive,todo note lack of command com support for win x
JRu,positive,todo no need to calculate every time
JRu,positive,fixme create attrreadermethod attrwritermethod for faster attr access
JRu,positive,todo times calculate the same value below
JRu,positive,todo opt for and ?
JRu,positive,fixme optimize for cases where we have no false branch
JRu,positive,fixme do not use rubyio for this
JRu,positive,fixme after jump is not in here will if ever be ? label afterjmp new label
JRu,positive,todo missing additional logic for dealing with conflicting protected fields
JRu,positive,todo rescan code range ?
JRu,positive,todo deal with unc names
JRu,positive,todo rescan code range ?
JRu,positive,todo pass this in ?
JRu,positive,fixme missing arity check
JRu,positive,todo warn tried to create proc object without a block
JRu,positive,todo make threadsafe
JRu,positive,todo port exact behavior from mri and move most locking logic into channeldescriptor todo for all lock nb cases return false if they would block
JRu,positive,todo do something here ?
JRu,positive,todo pipe handler to be reopened with path and w mode
JRu,positive,todo check the return value here
JRu,positive,fixme when we get jna we need to properly write this to errno
JRu,positive,todo other reserved names ?
JRu,positive,todo better detection when path is absolute or not if the path is not absolute then prepend the current working directory to the path
JRu,positive,todo deal with varargs
JRu,positive,todo must override in rubymodule to pick up constants
JRu,positive,todo store begin and end information into this node
JRu,positive,todo ruby locks the string here
JRu,positive,todo put these nil guards into tree bigger than i want to do right now
JRu,positive,fixme should we make this work with platform is locale or continue hardcoding us ?
JRu,positive,fixme make bodynode non null in parser
JRu,positive,fixme pass block down ?
JRu,positive,todo add trace call ?
JRu,positive,todo call ruby method
JRu,positive,todo build arg list based on number of args optionals etc
JRu,positive,todo check for ascii string
JRu,positive,sss fixme traverse up the scope hierarchy to find the constant as long as the parent is a static scope
JRu,positive,xxx should not check if valid option variable
JRu,positive,sss fixme should i be returning the operand constructed here ?
JRu,positive,fixme arg concat missing for opt call args
JRu,positive,todo add ir instructions for checking method arity s getvariablecompiler checkmethodarity required opt rest
JRu,positive,todo add safety check for taintedness
JRu,positive,fixme ruby post args code needs to come here
JRu,positive,todo make sure all appropriate open flags are added to this check
JRu,positive,sss fixme somewhere here we need to record information the type of this operand as string
JRu,positive,xxx check if it is appropriate type ?
JRu,positive,fixme translate this call below s unwrappassedblock
JRu,positive,sublist clear sublist is supposed to share same backing store as list todo in rubyarray asserttrue list size 
JRu,positive,sss fixme we need to build debug information tracking into the ir in some fashion so these methods below would have to have equivalents in ir scope implementations
JRu,positive,fix replace type with isinstanceof
JRu,positive,sss fixme incomplete
JRu,positive,todo no need to calculate every time
JRu,positive,sss fixme pick one of bytelist or string or add internal conversion methods to convert to the default representation
JRu,positive,todo check if too many open files gc and try again
JRu,positive,sss fixme cannot optimize this without assuming that range to ary method has not redefined so for now return null
JRu,positive,todo this and recacherespondsto needed to be synchronized for jruby but this degraded performance nearly x it is still faster than mri but a reanalysis of this code may show a faster way to ensure we  re caching safely
JRu,positive,sss fixme to be done
JRu,positive,fixme arg concat logic missing for opt call args
JRu,positive,todo implement wo not do this now
JRu,positive,fixme need to detect magic comment in here for encoding
JRu,positive,todo implement wo not do this now
JRu,positive,fixme we may be intern ing more than once
JRu,positive,todo validate port as numeric
JRu,positive,todo same zero length checks as file above
JRu,positive,todo this code should really check if a ruby equals method is implemented or not
JRu,positive,todo ruby unlocks the string here
JRu,positive,if not already defined we add a  new  that guesses at which signature to use todo just adding first one right now add in signature guessing logic
JRu,positive,fixme make thread pool threads daemons if necessary
JRu,positive,todo deal with varargs
JRu,positive,fixme we may be intern ing more than once
JRu,positive,filter out any java primitive names todo should check against all java reserved names here not just primitives
JRu,positive,fixme do not use rubyio for this
JRu,positive,todo we can probably release our references to the constantfields array and static instance callback hashes at this point
JRu,positive,do not clone cached methods fixme mri copies all methods here
JRu,positive,todo check safe taint on incoming string
JRu,positive,todo mri is just a when node we need this extra logic for ide consumers null in casenode statement should be implicit nil
JRu,positive,todo formalize conversion mechanisms between java and ruby
JRu,positive,fixme when we get jna we need to properly write this to errno
JRu,positive,todo turn off readable ? am i reading this right ? this only seems to be used while duping below since modes gets reset to actual modes afterward fptr mode m fmode readable ? fmode readable fmode writable
JRu,positive,todo someday enable
JRu,positive,bunch of methods still not implemented
JRu,positive,todo make it cross runtime safe by cow or eager copy
JRu,positive,todo do not calculate the same value times
JRu,positive,todo notify threads waiting on descriptors io ? probably not
JRu,positive,fixme when we get jna we need to properly write this to errno
JRu,positive,fixme this needs to happen for lambdas args checkargcount runtime parameters length
JRu,positive,fixme add text mode to mode flags
JRu,positive,todo ruby unlocks the string here
JRu,positive,todo call ruby method
JRu,positive,fixme do not use rubyio for this
JRu,positive,todo something about pipe buffer length here
JRu,positive,todo mri also can hadle bignum here
JRu,positive,todo ruby truncates string to specific size here but our bytelist should handle this already ?
JRu,positive,todo must override in rubymodule to pick up constants
JRu,positive,todo handle errors in buffered write by retrying until finished or file is closed
JRu,positive,fixme missing arity check
JRu,positive,todo must override in rubymodule to pick up constants
JRu,positive,todo check the return value here
JRu,positive,todo this is not handling multibyte yet
JRu,positive,todo safestringvalue here
JRu,positive,todo no need to calculate every time
JRu,positive,todo this should be something else like a tchar
JRu,positive,fixme this needs to happen for lambdas args checkargcount runtime parameters length
JRu,positive,todo ruby re checks that the buffer string has not been modified
JRu,positive,? r boolean true if file is readable by the real uid gid of the caller fixme need to implement an readable real p in filetest
JRu,positive,? w boolean true if file exists and is writable by the real uid gid fixme need to implement an writable real p in filetest
JRu,positive,todo add test methods here the name must begin with  test  for example
JRu,positive,if the method is extending something then we have to test if the handler is initialized
JRu,positive,todo make an assert here
JRu,positive,todo make into an assert once i get things like blockbodynodes to be implicit nil
JRu,negative,and shift the result back to the left multiply by abs scale
JRu,negative,exceptionnext target is for a next that does not push a new value like this one
JRu,negative,static methods only
JRu,negative,prepare to call class definition method
JRu,negative,inside a loop break out of it go to end of loop leaving break value on stack
JRu,negative,interrupt the target thread in case it is blocking or waiting warning we no longer interrupt the target thread since this usually means interrupting io and with nio that means the channel is no longer usable we either need a new way to handle waking a target thread that is waiting on io or we need to accept that we ca not wake such threads and must wait for them to complete their operation threadimpl interrupt
JRu,negative,ignore switch
JRu,negative,switch
JRu,negative,if element count is less than use helper methods
JRu,negative,todo ruby logic is somewhat more complicated here see comments after
JRu,negative,return last value from execution
JRu,negative,rb enc mbclen
JRu,negative,reverse the entire area of the array selected if it is reversed
JRu,negative,a place to store that special hiding space that bindings need to implement things like eval a binding eval p a all binding instances must get access to this hidden shared scope we store it here this will be null if no binding has yet been called
JRu,negative,this is the order in which mri does these two tests
JRu,negative,copy out any buffered bytes
JRu,negative,restore the original exception
JRu,negative,generate variable writers initialization code
JRu,negative,this is the order in which mri does these tests
JRu,negative,if the length is not a multiple of we need to pad the last byte
JRu,negative,system err println calculatelength str str
JRu,negative,used by our duck typification of proc into interface types to allow coercing a simple proc into an interface parameter
JRu,negative,basically just forcing a typeerror here to match mri
JRu,negative,bind  normal  parameter values to the local scope for this method
JRu,negative,args
JRu,negative,con popen is a case where i think we should just always shell out
JRu,negative,end of variable scope
JRu,negative,    in number just ignored
JRu,negative,mri p does not support char strings but yarv does i do not think it hurts to include this sprintf   c   a  is nicer than sprintf   c   a  
JRu,negative,foo are not getting set from somewhere i want the following assert to be true though assert variablevalues offset null getting unassigned staticscope getvariables offset
JRu,negative,check arity in the variable arity version
JRu,negative,the reason why we need the stream is to be able to invoke available on it stdin in java is non interruptible non selectable and attempt to read on such stream might lead to thread being blocked without any way to unblock it that is where available comes it so at least we could check whether anything is available to be read without blocking
JRu,negative,grab nil for local variables
JRu,negative,there are two different popular tz formats legacy ast gmt and newer one us pacific america los angeles this pattern is to detect the legacy tz format in order to convert it to the newer format understood by java api
JRu,negative,special form of sprintf that returns a rubystring and handles tainted strings correctly version for 
JRu,negative,no extra args for rest
JRu,negative,thread context receiver and original args
JRu,negative,prepare a string with the same number of redundant slashes so that we easily can prepend it to the result
JRu,negative,we append an index to ensure two identical method names will not conflict
JRu,negative,element set
JRu,negative,we have a body do a full on method
JRu,negative,close without removing from finalizers
JRu,negative,special form of sprintf that returns a rubystring and handles tainted strings correctly
JRu,negative,otherwise decrement and possibly close as normal
JRu,negative,last index accessed by next last index accessed by get
JRu,negative,isfoo foo isfoo foo
JRu,negative,name
JRu,negative,nofunctionalitysignalfacade
JRu,negative,logevery n methods based on configuration
JRu,negative,get the value from the map via the key
JRu,negative,finally grab the script
JRu,negative,only whitespace allowed after value for strict
JRu,negative,done processing args
JRu,negative,rest of the argument array
JRu,negative,mri does not flag it as an error if width is given multiple times as a number but it does for
JRu,negative,new exception printstacktrace
JRu,negative,head must have no non trivial assigns array groupings basically
JRu,negative,truncate ca not lengthen files so we save position seek write and go back
JRu,negative,class could not be found nor generated give up on jit and bail out
JRu,negative,a scoped location of this variable high bits is how many scopes down and low bits is what index in the right scope to set the value
JRu,negative,sizes must match
JRu,negative,oh well it was worth a try go let double floatingdecimal handle it
JRu,negative,if we get here no optz cases work fall back on unoptz
JRu,negative,super uses current block if none given
JRu,negative,next jump
JRu,negative,test that requiring a normal java class raises an error jruby 
JRu,negative,check args first since body inspection can depend on args
JRu,negative,without a flush ant will miss some of our output
JRu,negative,intdigits is not used here but if it were it would be 
JRu,negative,copy out any buffered bytes
JRu,negative,create the closure class and instantiate it
JRu,negative,ignore i do not like doing it but it seems like we really just need to make all channels non blocking by default and use select when implementing blocking ops so if this remains set non blocking perhaps it is not such a big deal
JRu,negative,
JRu,negative,no arg constructor using static references to ruby and rubyclass
JRu,negative,create the default thread group
JRu,negative,there should only be one more thread in thread group than before we started
JRu,negative,skip in bytes will add where appropriate
JRu,negative,perform the dispatch
JRu,negative, d  and  i  are the same
JRu,negative,keep cr ?
JRu,negative,broken symlinks considered by exists as non existing so we need to check for symlinks explicitly
JRu,negative,dup it since we need to return appropriately if it is false
JRu,negative,ruby uses qnil here we use dummy because we need a class
JRu,negative,if root of method is rescue compile as light rescue
JRu,negative,gotta have at least a zero
JRu,negative,runtime getwarnings warn id struct constant redefined frame getfile frame getline redefining constant struct name name
JRu,negative, u  with space or plus flags is same as  d 
JRu,negative,load null block
JRu,negative,only supports simple parallel assignment of up to values to the same number of assignees
JRu,negative,switch for no exponent so drop through for calculation
JRu,negative,this method has jited already or has been abandoned bail out
JRu,negative,we have read ahead and need to back up
JRu,negative,if a line is followed by a blank line put it back
JRu,negative,reuse trailing consecutive sequence at same slot
JRu,negative,send it along as arity specific we do not need the array
JRu,negative,classes are directly in the hierarchy so no special logic is necessary for implementer
JRu,negative,create method for toplevel of script
JRu,negative,we promote our box to being its own box since we  re changing visibilities and need it to be reflected on this method object independent of any other sharing the box
JRu,negative,recv
JRu,negative,has the method that is calling super received a block argument
JRu,negative,argf object
JRu,negative,create the closure class and instantiate it
JRu,negative,recv
JRu,negative,done done done nothing to do for done done done done done done done ? done done done done done done done done done done done case definednode return builddefined node m incomplete done done done done done done done done case ensurenode return buildensurenode node m deferred done done done done case flipnode return buildflip node m sss fixme what code generates this ast ? done done done done done done done done done done done done done done done done done done ? done done done done done done partially case opelementasgnnode return buildopelementasgn node m deferred sss fixme what code generates this ast ? done case postexenode return buildpostexe node m deferred case preexenode return buildpreexe node m deferred done ? ? done
JRu,negative,ok we now have the significand in digits ndigits and the exponent in exponent we  re ready to format
JRu,negative,serialization killed our dynamic scope we can just create an empty one since serialization cannot serialize an eval which is the only thing which is capable of having a non empty dynamic scope
JRu,negative,condition is always true just compile it and not body
JRu,negative,ruby ignores empty syswrites
JRu,negative,input record separator
JRu,negative,ruby is designation for some platforms minus version numbers in some cases
JRu,negative,try optz version
JRu,negative,line 
JRu,negative,if the environment variables ca not be obtained define an empty env
JRu,negative,line 
JRu,negative,after defn of stderr as the call may produce warnings
JRu,negative,for sockets only write as much as will fit
JRu,negative,done processing args
JRu,negative,it is safe since adler update does not modify the array
JRu,negative,redonode redonode redonode node
JRu,negative,too big for us
JRu,negative,if we get here no optz cases work fall back on unoptz
JRu,negative,instance variable methods
JRu,negative,assign to appropriate variable
JRu,negative,skip all whitespace in pack format string
JRu,negative,head must not be null and there must be no args like arg
JRu,negative,need padding i m fairly sure there is a library call to create a string filled with a given char with a given length but i could not find it
JRu,negative,fall back on env entry for user
JRu,negative,compile into array
JRu,negative,index for the item
JRu,negative,double testing args length here but it avoids duplicating the proc setup code in two places
JRu,negative,call getpwent to fail early if unsupported
JRu,negative,we force argparamcount to since we always know we will have args
JRu,negative,perform assignment for the next node
JRu,negative,? o boolean true if file exists and is owned by the caller is real uid
JRu,negative,intdigits 
JRu,negative,line 
JRu,negative,compile first node only
JRu,negative,also create the javaproxy classes
JRu,negative,drop through for non strict digits
JRu,negative,inside a loop jump to conditional
JRu,negative,switch
JRu,negative,if root of method is rescue compile as a light rescue
JRu,negative,do nothing this iteration restarts
JRu,negative,attempt to set the permissions if we have been passed a posix instance and only if the file was created in this call
JRu,negative,always false or nil
JRu,negative,if we  re not the argument scope for zsuper try our parent
JRu,negative,create the closure class and instantiate it
JRu,negative,load args which will be the irubyobject representing block args
JRu,negative,create the closure class and instantiate it
JRu,negative,jrubymethod public irubyobject to proc return rubyproc newproc getruntime callblock newcallclosure this getruntime getsymbol arity noarguments new toproccallback this getruntime getcurrentcontext block type proc
JRu,negative,line 
JRu,negative,check args first since body inspection can depend on args
JRu,negative,compile condition as non expr and just compile then body
JRu,negative,must not be used across threads
JRu,negative,try to read grent to fail fast
JRu,negative,line 
JRu,negative,mri behavior
JRu,negative,since we  re not actually duping the incoming channel into our handler we need to copy the original sync behavior from the other handler
JRu,negative,rubyclass
JRu,negative,compstmt position includes both parens around it
JRu,negative,not actually called anywhere all known uses call the fast version
JRu,negative,first we make modifications to the class to adapt it to being both a ruby class and a proxy for a java type
JRu,negative,switch
JRu,negative,empirical observations null some arity argsnode this argsnode then check for arity changes newline splatnode argspushnode
JRu,negative,irubyobject rubyclass visibility irubyobject rubyclass irubyobject
JRu,negative,parent container for this context can be dynamic if dynamic at runtime this will be the meta object corresponding to a class script module method closure list of ir instructions for this method
JRu,negative,reopen
JRu,negative,long big endian
JRu,negative,system err println stringtolong converted c c
JRu,negative,in certain places like grep we do not use real frames for the call blocks this has the effect of not setting the backref in the correct frame this delta is activated to the place where the grep is running in so that the backref will be set in an appropriate place
JRu,negative,argf methods
JRu,negative,do nothing allow loop to redo
JRu,negative,system err println stringtolong reading c data s
JRu,negative,even shift floors to or bit biginteger
JRu,negative,need the array use unoptz version
JRu,negative,happens with native exceptions should not filter those out
JRu,negative,line 
JRu,negative,ignore leading zeroes switch
JRu,negative,inspect body and args
JRu,negative,next v g x v
JRu,negative,rubyclass rubyclass rubyclass rubyclass self rubyclass rubyclass rubyclass
JRu,negative,bouncy castle does not support algorithm
JRu,negative,ca not do it
JRu,negative,not normally used but is left in here since it can be useful in debugging grammar and lexing problems
JRu,negative,line 
JRu,negative,position within source must reflect the actual offset and column since we ate an extra character here this accounting is normally done in read we should update position info
JRu,negative,colon assign in object
JRu,negative,synthetic methods always have zero arg parameters
JRu,negative,last node either instanceof whennode or null is the else
JRu,negative,we are presumably running a precompiled class load directly
JRu,negative,if send with a literal symbol compile it as a direct fcall
JRu,negative,note if is  happens to the a class this is effectively an assignment of a class instance variable
JRu,negative,define argv and for this runtime
JRu,negative,once hasnext has been called we commit to next returning the entry it found even if it were subsequently deleted
JRu,negative,r x y
JRu,negative,first try our custom generated unsafe
JRu,negative,aggregate when nodes into a list unfortunately this is no
JRu,negative,line 
JRu,negative,compile first node only
JRu,negative,does not fit in buffer write immediately ensure nothing left to write
JRu,negative,assignment means the value is already on the stack
JRu,negative,paths which end in or must be stripped off
JRu,negative,this is almost always already interned since it will be called with a symbol in most cases but when created from java code we might get an argument that needs to be interned addaccessor has as a precondition that the string must be interned
JRu,negative,? s int nil if file has nonzero size return the size otherwise nil
JRu,negative,mri behavior be default digits in the exponent use digits only when necessary see comment for writeexp method for more details
JRu,negative,if the read buffer is ahead back up
JRu,negative,deal with length width
JRu,negative,switch for no more data ok for strict to go calc
JRu,negative,next entry to return current slot current entry
JRu,negative,add setposition impl which stores filename as constant to speed updates
JRu,negative,mri behavior in this mode trailing zeroes are removed e e 
JRu,negative,next x e d x 
JRu,negative,intdigits is not used here but if it were it would be 
JRu,negative,iterate over remainder of buffer until we find a match
JRu,negative,first digit is always printed
JRu,negative,three args no block load null block
JRu,negative,deal with length width
JRu,negative,the problem we trying to solve below stdin in java is blocked and non interruptible so if we invoke read on it we might never be able to interrupt such thread so we use in available to see if there is any input ready and only then read it but this approach ca not tell whether the end of stream reached or not so we might end up looping right at the end of the stream well at least we can improve the situation by checking if some input was ever available and if so not checking for available anymore and just go to read
JRu,negative,now for all variables used by  i  mark them live before  i 
JRu,negative,these are only needed if we have a non noop call config
JRu,negative,because regexp sets backref we have to make this backref aware
JRu,negative,note currently this optimization is limited to the following situations all expressions must be int ranged literal fixnums it also still emits the code for the safe when logic which is rather wasteful since it essentially doubles each code body as such it is normally disabled but it serves as an example of how this optimization could be done ideally it should be combined with the when processing to improve code reuse before it is generally available
JRu,negative,ok we have fast paths
JRu,negative,copy what is in the buffer if there is some buffered data
JRu,negative,if more than vars get values array too
JRu,negative,set to default thread group
JRu,negative,check the visibility of the previous frame which will be the frame in which the class is being eval ed
JRu,negative,optimistic pass calculate value as digits are processed digits lax rules decimal digits lax rules exponent sign digits lax rules digits strict rules decimal digits strict rules exponent sign digits strict rules complete calculation if possible
JRu,negative,in this mode is always printed
JRu,negative,line 
JRu,negative, e nn e nn
JRu,negative,let rescuedblock continue
JRu,negative,the method also needs a scope do both
JRu,negative,a  next  is like a local return from the block ending this call or yield
JRu,negative,intdigits 
JRu,negative,build first node and ignore its result and then second node
JRu,negative,we  re doing normal framed compilation or the method needs a frame
JRu,negative,try to look up field for simple name get field if nonnull go straight to dispatch
JRu,negative,do nothing
JRu,negative,line 
JRu,negative,long slow way causes disabling
JRu,negative,silence
JRu,negative,precision for g g includes integer digits
JRu,negative,make a nil node if no body notice this is not part of ast
JRu,negative, e nnn e nnn
JRu,negative,lattice top bottom any values these will be used during dataflow analyses
JRu,negative,ok we have fast paths
JRu,negative,ignore this select will set the correct mode when it is finished
JRu,negative,execute rescue block
JRu,negative,line 
JRu,negative,if no exception is thrown execute else block
JRu,negative,load all arguments straight through
JRu,negative,do nothing
JRu,negative,note segmentshift differs from concurrenthashmap is calculation due to issues with system identityhashcode upper n bits always at least under java winxp
JRu,negative,clear exception when handled or retried
JRu,negative,proc implementing an interface pull in the catch all code that lets the proc get invoked no matter what method is called on the interface
JRu,negative,what static scoping relationship exists when it comes into being
JRu,negative,the following constants capture pre known static call sites used to implement ruby internals
JRu,negative,for  foo 
JRu,negative,method handle arg receive return value and call instructions
JRu,negative,just rethrow
JRu,negative,we re set self to the class but store the old self in a temporary local variable this is to prevent it gcing in case the singleton is short lived
JRu,negative,tempering
JRu,negative,read
JRu,negative,normalize the value
JRu,negative,clear exception when handled or retried
JRu,negative,s b true since intlength 
JRu,negative,arg 
JRu,negative,ok now it gets expensive
JRu,negative,construct the proxy method
JRu,negative,switch will use this if we have to go back the slow way
JRu,negative,putting a bit back so we  re not at eof anymore
JRu,negative,yylen 
JRu,negative,? s boolean true if file exists and is a socket
JRu,negative,save entering the try if there is nothing to ensure
JRu,negative,common constant cvar methods
JRu,negative,for  foo 
JRu,negative,eq i e false c
JRu,negative, 
JRu,negative,then try sun is unsafe
JRu,negative,    is printed
JRu,negative,note if is  happens to the a class this is effectively an assignment of a class instance variable
JRu,negative,value equality
JRu,negative,not saving dfs instance as it will only be used once at most per call
JRu,negative,for  foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,copy any buffered data including ungetc byte
JRu,negative,yydgoto 
JRu,negative,need to clamp source buffer size to avoid overrun
JRu,negative,digits array shifted update all
JRu,negative,line 
JRu,negative,all precision numebers printed
JRu,negative,any biginteger is bigger than fixnum and we do not have fixable
JRu,negative,now used as an interpreter event
JRu,negative,in method body with no containing loop issue jump error load runtime and value issue jump error
JRu,negative,store each line into this list if not null
JRu,negative,default output handle
JRu,negative,only arrays that are lightweight are being used as args arrays
JRu,negative,instance methods
JRu,negative,explode array it is an internal args array
JRu,negative,range each func range step i b e args
JRu,negative,decimal form like but not just like  f 
JRu,negative,check if it is an immediate and do not outline
JRu,negative,now some data
JRu,negative,check arity checkarity mv scope
JRu,negative,no actual test so do  when  if when expression is not nil
JRu,negative,found a match above check if remaining separator characters match appending as we go
JRu,negative,ignore compiler pragmas
JRu,negative,sss looks like we receive the arg in buildblockargsassignment via the iternode we wo not get here for argument receives so builddasgn is called for assignments to block variables within a block as far as the ir is concerned this is just a simple copy
JRu,negative,yylen 
JRu,negative,translate ret a b to ret a ? true b as follows v build a opt ret can be set to v but effectively v is true if we take the branch to l while this info can be inferred by using attributes why bother if we can do this ? ret true beq v true l v build b ret v l
JRu,negative,yydgoto 
JRu,negative,iterate over the rubyhash keyset simultaneously iterating over the values
JRu,negative,assert value instanceof rubyarray not an array
JRu,negative,else leave it null
JRu,negative,line 
JRu,negative,jruby presumably this require should fail
JRu,negative,line 
JRu,negative,we lazily initialize this in case readline readline has been overridden in ruby s readline
JRu,negative,line 
JRu,negative,clean up string representation so that it could be understood by java is bigdecimal not terribly efficient for now mri allows d and d as exponent separators
JRu,negative,line 
JRu,negative,last conditional case use defaultcase
JRu,negative, 
JRu,negative,we do preand post load outside the body versions to pre prepare and pre push the dynamic scope we need for lastline
JRu,negative,each root node has a top level scope that we need to push
JRu,negative,we are creating a new io object that shares the same iohandler and fileno
JRu,negative,significant digits and exponent
JRu,negative,line 
JRu,negative,evstrnode some expression
JRu,negative,the method does not need a scope but has static scope needs use a dummy scope
JRu,negative,mark as captured if from containing scope
JRu,negative,note serialization is primarily supported for testing purposes and there is no general guarantee that serialization will work correctly specifically instance variables pointing at symbols threads modules classes and other unserializable types are not detected
JRu,negative,no such luck
JRu,negative,new factory methods
JRu,negative,mark as captured if from containing scope
JRu,negative,equivalent of data get struct this will first check that the object in question is actually a t data equivalent
JRu,negative,now some data
JRu,negative,wake up any channels that became unblocked
JRu,negative,we know this is a block scope because a local scope cannot be within a local scope if topscope was itself it would have created a localasgnnode above
JRu,negative,create the closure class and instantiate it
JRu,negative,s b true since intlength 
JRu,negative,in method body with no containing loop issue jump error load runtime and value issue jump error
JRu,negative,is the parser current within a singleton value is number of nested singletons
JRu,negative,force the client socket to be blocking
JRu,negative, 
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,add real top to new top unless this top is empty only begin end nodes or truly empty
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative, 
JRu,negative,c c c boolean
JRu,negative,return new calloneargnode firstnode getposition firstnode operator new arraynode secondnode getposition secondnode
JRu,negative,fixme what is correct  recv  argument ? this does produce the desired behavior
JRu,negative,block and block pass passed in at same time uh oh
JRu,negative,package scheme separate module for each full package name constructed from the camel cased package segments java javalang object
JRu,negative,create constants for flock
JRu,negative,if there is a second argument it is the path to which the first argument is relative
JRu,negative,extract item from array
JRu,negative,create ruby proxies for any input arguments that are not primitives
JRu,negative,zero argument declaration
JRu,negative,nothing else to here the module version will be included in the class
JRu,negative,yylen 
JRu,negative,set the binding is frame is previous file and line to current so trace will show who called the block
JRu,negative,store to temp so it does null out on us mid stream
JRu,negative,kcode none is used because kcode does not affect parse in ruby if ruby encoding pragmas are implemented this will need to change
JRu,negative,extract item from array
JRu,negative,other args begin at index 
JRu,negative,yydgoto 
JRu,negative,this does the assignment
JRu,negative,yyrindex 
JRu,negative,flush first
JRu,negative,switch if
JRu,negative,line 
JRu,negative,the name of the variable
JRu,negative,seek to force underlying buffer to flush
JRu,negative,dynamically increase
JRu,negative,brace to match it bracket expressions must be
JRu,negative,line 
JRu,negative,translate ret a b ret a ? b false v build a opt ret can be set to v but effectively v is false if we take the branch to l while this info can be inferred by using attributes why bother if we can do this ? ret false beq v false l v build b ret v l
JRu,negative,line 
JRu,negative,length check is a hack we should not be reeiving as a filename ever
JRu,negative,line 
JRu,negative,o oo ooo or backref
JRu,negative,line 
JRu,negative,java and are not the same as ruby
JRu,negative, e nn e nn
JRu,negative,java requires w for creating a file that does not exist
JRu,negative,yylen 
JRu,negative,create a new variable using the prefix
JRu,negative,line 
JRu,negative,check if the method has been explicitly excluded
JRu,negative,line 
JRu,negative,switch while
JRu,negative,line 
JRu,negative,we limit reads to bulk read sized chunks to avoid nio allocating a huge temporary native buffer when doing reads into a heap buffer if the dst buffer is direct then no need to limit
JRu,negative,line 
JRu,negative,pre create all the core classes potentially referenced during startup
JRu,negative,jruby until case
JRu,negative,if we  re not attempting to invoke method missing and method is not visible branch to method missing
JRu,negative,line 
JRu,negative,get the value from the map via the values iterator
JRu,negative,line 
JRu,negative,irubyobject dynamicmethod threadcontext irubyobject rubymodule string irubyobject
JRu,negative,line 
JRu,negative,now clear out any previously selected channels
JRu,negative,line 
JRu,negative,seek to force read buffer to invalidate
JRu,negative,line 
JRu,negative,lazily create class init only if necessary
JRu,negative, 
JRu,negative,block
JRu,negative,line 
JRu,negative,this method takes as input a map of operands to their values and outputs the result of this instruction if the value map provides a value for any of the instruction is operands the expectation is that the operand will be replaced with the simplified value it is not required that it do so code correctness is not compromised by failure to simplify param valuemap mapping from operands to their simplified values returns simplified result output of this instruction
JRu,negative,system err println main len len
JRu,negative,expect value to be an array of nodes
JRu,negative,if no explicit block passed to super then use the one passed in unless it is explicitly cleared with nil
JRu,negative,use same classindex as metaclass since we  re technically still of that type
JRu,negative,line 
JRu,negative,proxy is under construction building thread can safely read non volatile value
JRu,negative,line 
JRu,negative,minus one more for irubyobject
JRu,negative,line 
JRu,negative,bench straight up long fib 
JRu,negative,line 
JRu,negative,translate x y x is true x ? x y x build x should return a variable f is true x beq f true l x build y l
JRu,negative,eq i e true
JRu,negative,get javaclass if this is the new proxy class verify it matches if this is a superclass proxy
JRu,negative,main while loop offset length
JRu,negative,load path
JRu,negative,   
JRu,negative,enebo c can never be antrhign but why did i put this here ?
JRu,negative,assign given optional arguments to their variables
JRu,negative,first build an assignment for a splat if any with the rest of the args
JRu,negative,experimental class reification support to create real java classes for ruby classes after the first opening
JRu,negative,attempt to load the found library
JRu,negative,make sure the appropriate scope has proper size see jruby 
JRu,negative,wait until thread has completed
JRu,negative,jrubymethod name complex ?
JRu,negative,synchronize and re check to avoid creating more than one selector per provider
JRu,negative,
JRu,negative,populate up to shorter of calling arguments or local parameters in the block
JRu,negative,jrubymethod name inexact ?
JRu,negative,we use file test since it is faster than a stat also euid uid in java always
JRu,negative, 
JRu,negative,set thread context jruby classloader here for the main thread
JRu,negative,    and all precision digits printed
JRu,negative,note that we will potentially see the refs for both the java object and proxy whichever we see first will cause the entry to be removed the other will not match an entry and will be ignored
JRu,negative,assign the default values adding to the end of allargs
JRu,negative,check the entry setvalue values come back out ok
JRu,negative,in frame evalstate should already have receiver set as self continue to use it
JRu,negative,for prec root x must surely be ok return small prec roots without iterations
JRu,negative,dangling char
JRu,negative,line 
JRu,negative,when reading into a heap buffer the jvm allocates a temporary direct bytebuffer of the requested size to avoid allocating a huge direct buffer when doing ludicrous reads e g g or more we split the read up into chunks of no more than m
JRu,negative,setfoo foo foo foo
JRu,negative,relatively cheap test for bit values
JRu,negative,a while node could receive non local flow control from any of these a closure within the loop an eval within the loop a block arg based proc called within the loop
JRu,negative, class state self  and  class obj  uses defn as opposed to defs
JRu,negative,promise to implement n
JRu,negative,mri rounds up on nnn nnn but not nnn except for when they do
JRu,negative,depending on size of original args call appropriate utility method
JRu,negative, f 
JRu,negative,no dec digits after error for strict
JRu,negative,now used as an interpreter event
JRu,negative,scope method closure to which this cfg belongs entry bb dummy exit bb dummy the actual graph next available basic block id
JRu,negative,debugging code keeping for now
JRu,negative,check for frame field reads or writes
JRu,negative,the name of the variable
JRu,negative,bench fully boxed fib
JRu,negative,mri extends in order from last to first
JRu,negative,eq i e false
JRu,negative,load object under value
JRu,negative,typematcher
JRu,negative,for  b foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,complete the request by filling the read buffer first
JRu,negative,go through negated powers of until we find one small enough
JRu,negative,public interface
JRu,negative,add to the corresponding positive power of for the result meaningful ? no conformant ? yes i just write the code
JRu,negative,if it is an array only add methods for aref aset and length
JRu,negative,attribute set
JRu,negative,avoid double copying for reads that are larger than the buffer size
JRu,negative,identity equality
JRu,negative,additional context surrounding tokens that both the lexer and grammar use
JRu,negative,line 
JRu,negative,mri behavior null byte after leads to string null byte in other places like leads to error
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,get the control flow graph for this scope only valid for methods closures
JRu,negative,least significant r bits
JRu,negative,check current directory if file exists retrieve url and return resource
JRu,negative,drop through for sign
JRu,negative,rb enc precise mbclen
JRu,negative,line 
JRu,negative,add all names for this annotation
JRu,negative,most significant w r bits
JRu,negative,no dec digits end of parseable data go to calc
JRu,negative,set argv from main is args
JRu,negative,switch for
JRu,negative, 
JRu,negative,trim extension to try other options
JRu,negative,no more values to stick in rest arg
JRu,negative,line 
JRu,negative,arity checkarity runtime argslength
JRu,negative,these methods below are used during compile time optimizations
JRu,negative,done with closure compilation
JRu,negative,line 
JRu,negative,line 
JRu,negative,notify thread to proceed
JRu,negative,done with closure compilation
JRu,negative,line 
JRu,negative,line 
JRu,negative,note since we are processing asts loop bodies are processed in depth first manner with outer loops encountered before inner loops and inner loops finished before outer ones so we can keep track of loops in a loop stack which keeps track of loops as they are encountered this lets us implement next redo break retry easily for the non closure cases
JRu,negative,no arg grouping just use bulk assignment methods
JRu,negative,should we run this pass on the current scope before running it on nested scopes ?
JRu,negative,first try to use drive letter from supplied dir value then try current work dir
JRu,negative,line 
JRu,negative,a scoped location of this variable high bits is how many scopes down and low bits is what index in the right scope to set the value
JRu,negative,whether this scope is used as the argument scope for e g zsuper
JRu,negative,constant vector a
JRu,negative,will have a trailing g fills trailing zeroes if
JRu,negative,yydefred 
JRu,negative,line 
JRu,negative,state i xffffffffl
JRu,negative,invoke method
JRu,negative,optargs and restargs require more work so isolate them and arraylist creation here
JRu,negative,check if we  re a stdio io and ensure we  re not badly mutilated
JRu,negative,rounding neccessary
JRu,negative,jruby aliasing eval and other special methods should display a warning we warn because we treat certain method names as special for purposes of optimization hopefully this will be enough to convince people not to alias them
JRu,negative,state j xffffffffl
JRu,negative,start setup method
JRu,negative,get self
JRu,negative,looks like someone is trying to raise a java exception let them
JRu,negative,used only by the compiler interpreter will set the literal flag
JRu,negative,this appears to be some windows only mode on a java platform this is a no op
JRu,negative,state i xffffffffl
JRu,negative,array given to rest should pass itself array with rest other args should extract array array with multiple values and no rest should extract args if there are more than one argument
JRu,negative,no timeout in critical section
JRu,negative,ensure that separator is valid otherwise give it the default paragraph separator
JRu,negative,msb is assuring non zero initial array
JRu,negative,readable only by thread building proxy so do not need to be volatile used to handle recursive calls to getproxyclass module while proxy is being constructed usually when a constant defined by a class is of the same type as that class
JRu,negative,never visited should be fine
JRu,negative,retry handling in the rescue blocks
JRu,negative,add in reverse order
JRu,negative,ok it is a socket set values accordingly just using af inet since we ca not tell from socketchannel
JRu,negative,we can callsite cache const missing if we want
JRu,negative,determine what sort of assigner should be used for the provided  iter  e g block assigner provides just the right logic for assigning values to local parameters of the block this method also has a second optimization which is to set  noargblock  in the case that the block is a block which accepts no arguments the primary reason for this second optimization is that in the case of a yield with a rubyarray we will bypass some logic processing the rubyarray into a proper form only to then not do anythign with it a secondary benefit is that a simple boolean seems to optimize by hotspot much faster than the zero arg assigner
JRu,negative,ruby grammar productions return plenty of nulls
JRu,negative,change visibility so others can see it
JRu,negative,can be overridden to be informed when objects are removed
JRu,negative,append what we read into our buffer and allow the loop to continue
JRu,negative,system err println bytelisttoinum str
JRu,negative,package protected
JRu,negative,something in here is used to build up ruby stack trace
JRu,negative,equivalent to mri case    
JRu,negative,not reached
JRu,negative,these methods below are used during compile time optimizations
JRu,negative,store to temp so it does null out on us mid stream
JRu,negative,mri behavior for  q  do not add trailing nils
JRu,negative,ruby grammar productions return plenty of nulls
JRu,negative,mri behavior if digits is the result is the same as the operator
JRu,negative,system err println figureoutbase base base
JRu,negative,result eval arr array  c  p arr assertequals c result result eval arr array  d  p arr assertequals d result
JRu,negative,only public methods
JRu,negative,initialize all flow graph nodes
JRu,negative,for  b foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,see if module is in chain cannot match against itself so start at superclass
JRu,negative,rb reg initialize str
JRu,negative,adapter tc recv args block 
JRu,negative,for  foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,switch
JRu,negative,rubymodule module context getrubyclass
JRu,negative,presumably this require should fail
JRu,negative,system err println getsign sign
JRu,negative,if we could not find the constant from cref then try getting from inheritence hierarchy
JRu,negative,for  b foo 
JRu,negative,accumulate call arguments
JRu,negative,system err println getsign
JRu,negative,data currentfile callmethod context lineno line
JRu,negative,xhh
JRu,negative,any exceptions raised must continue to be raised skipping restoration
JRu,negative,not reached
JRu,negative,line 
JRu,negative,not reached
JRu,negative,if there is a non null superclass we  re including into a normal class hierarchy update subclass relationships to avoid stale parent child relationships
JRu,negative,not reached
JRu,negative,rethrow exception rethrow it
JRu,negative,the name of the variable
JRu,negative,generate constants initialization code
JRu,negative,trailing garbage
JRu,negative,zlib behavior negative win bits means no header and no checksum
JRu,negative,produce a nicer error since rubyists are not used to seeing this
JRu,negative,if we have a specific arity helper to construct an array for us use that
JRu,negative,not reached
JRu,negative,irubyobject irubyobject irubyobject irubyobject rubyclass irubyobject rubyclass rubyclass irubyobject rubyclass visibility irubyobject rubyclass visibility visibility
JRu,negative,not reached
JRu,negative,load block from version of method
JRu,negative,produce a nicer error since rubyists are not used to seeing this
JRu,negative,our values holder name of variables are kept in staticscope
JRu,negative,no number
JRu,negative,to turn a module into an interface collection we add a class instance variable to hold the list of interfaces and modify append features for this module to call append features on each of those interfaces as well
JRu,negative,states
JRu,negative,how far ahead we are when reading
JRu,negative,system err println calculatelength str str
JRu,negative,the cache is full abandon jit for this method and bail out
JRu,negative,line 
JRu,negative,we need to collect all methods though we will only install the ones that are named in this class
JRu,negative,not reached
JRu,negative,too big for us
JRu,negative,portion of line right after beginning marker
JRu,negative,in case when the number of occurences is explicitly specified we have to read up the remaining garbage after the to satisfy the requested pattern
JRu,negative,we define an actual list to get around bug in java integration 
JRu,negative,rb iterate value value str step value args step i value iter
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,string has it is own bytelist but it is pointing to a shared buffer byte
JRu,negative,system err println stringtolong val
JRu,negative,eq i e false pop the extra result and replace with the send part of the and
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,constants for seek
JRu,negative,colon 
JRu,negative,first char must be digit or decimal point
JRu,negative,not reached
JRu,negative,if entry starts with a slash skip it since classloader resources never start with a
JRu,negative,re register since fileno points at something new now
JRu,negative,normal return for method body return jump for within a begin rescue ensure
JRu,negative,signal uses sun misc classes this is not allowed in the security sensitive environments
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,mri behavior on windows it treats as a root of a current drive but only if single slash is present e g if current work directory is  d home directory  then means  d   basically   path  is treated as a relative path relative to the current drive   path  is treated as absolute one
JRu,negative,now read unbuffered directly from the file
JRu,negative,not reached
JRu,negative,captures begin and end are used when not groups defined source string
JRu,negative,not reached
JRu,negative,new argauxiliarynode getposition string getvalue 
JRu,negative,attribute set
JRu,negative,this method takes as input a map of operands to their values and outputs if the value map provides a value for any of the instruction is operands this method is expected to replace the original operands with the simplified values it is not required that it do so code correctness is not compromised by failure to simplify
JRu,negative,it was not found at all
JRu,negative,singleton methods
JRu,negative,colon assign in object
JRu,negative,see if we already have this descriptor open if so then we can mostly share the handler keep open file but possibly change the mode
JRu,negative,class method
JRu,negative,not synchronizing these methods no harm if these values get set more than once also note that there is no chance of getting a partially initialized class module as happens before is guaranteed by volatile write read of constants table
JRu,negative,for b foo
JRu,negative,does this method define code ? default is yes which basically leads to pessimistic but safe optimizations but for library and internal methods this might be false
JRu,negative,element set
JRu,negative,not closing from finalize
JRu,negative,note this method produces meaningful results only for rubyio objects for everything else returns 
JRu,negative,we yield here to hopefully permit the target thread to schedule mri immediately schedules it so this is close but not exact
JRu,negative,instance config for the script run
JRu,negative,special classes like collections empty list are inner classes that are private but implement public interfaces their methods are all public methods for the public interface let these public methods execute via setaccessible true
JRu,negative,if we have more than one arg make sure the array created to contain them is not objectspaced
JRu,negative,not reached
JRu,negative,wire up function call args to use the super fast native invokers
JRu,negative,line 
JRu,negative,do not initialize with class do not put in object space and do not taint
JRu,negative,translate x y x is true x ? y false x build x should return a variable f is true x beq f false l x build y l
JRu,negative,fields used for direct optimistic calculation number of significant digits updated as parsed zeroes that may go to significand or exponent offset of decimal pt from start no decimal significand updated as parsed exponent updated as parsed
JRu,negative,add potentially overridden names to the key todo see note above re optimizations
JRu,negative,we reached the end
JRu,negative,declared type returns the qualified name without for inner classes
JRu,negative,goto next bucket
JRu,negative,mri behavior value given in seconds converted to float less than or equal to zero returns immediately returns nil
JRu,negative,we reached the end of a list
JRu,negative,rest arg must be splatted
JRu,negative,todo varargs ?
JRu,negative,this method exists for us to break up multiple expression when nodes e g when into individual whennodes the primary reason for this is to ensure lazy evaluation of the arguments when foo bar gar to prevent side effects in the old code this was done using nested when statements which was awful for interpreter and compilation notes this has semantic equivalence but will not be lexically equivalent compiler needs to detect same bodies to simplify bytecode generated
JRu,negative,not reached
JRu,negative,note all fields are final rehash creates new entries when necessary as documented in java util concurrent concurrenthashmap java that will statistically affect only a small percentage of entries for a given rehash
JRu,negative,remove leading whitespace includes for lax get sign if any
JRu,negative,single precision native single precision native
JRu,negative,todo varargs ?
JRu,negative,eq i e false
JRu,negative,not reached
JRu,negative,foo are not getting set from somewhere i want the following assert to be true though assert variablevalues offset null getting unassigned staticscope getvariables offset
JRu,negative,not reached
JRu,negative,if refcount is at or below zero we  re no longer valid
JRu,negative,modelled after c ruby implementation java not same as ruby
JRu,negative,correct position for read write buffering we could invalidate but expensive
JRu,negative,else body
JRu,negative,line 
JRu,negative,determine if the parameter might be passed as a bit int parameter this just applies to buffer pointer types
JRu,negative,this constructor is used by fdopen so we do not increment descriptor ref count
JRu,negative,inner class use to delimit
JRu,negative,copy constructor
JRu,negative,backwards compatibility but threadsafe now
JRu,negative,build first node only and return true
JRu,negative,unicode is can be only bits long int is enough
JRu,negative,may return nil in many circumstances e g nan
JRu,negative,skip anything not related to jruby
JRu,negative,block argument assignment if there is a block arg
JRu,negative,yylhs 
JRu,negative,check the length every iteration since the block can modify this string
JRu,negative,string matches last paren
JRu,negative,unlike weakhashmap our entry does not subclass weakreference but rather makes it a final field the theory is that doing so should force a happens before relationship wrt the weakreference constructor guaranteeing that the key will be visibile to other threads unless it is been gc ed see jls final fields and happens before order to confirm or refute my reasoning here
JRu,negative,args should be at end
JRu,negative,todo it is not clear to me why in floatingdecimal the slop calculation performed above for positive exponents is not used for negative exponents as well will find out
JRu,negative,should alter global state
JRu,negative,eval value and save it
JRu,negative,start a new populator
JRu,negative,we need to ensure that the variable names generated here cannot conflict with ruby variable names hence the tthat is appended to the beginning
JRu,negative,ignore leading zeroes switch
JRu,negative,jrubymethod name new meta true visibility visibility private
JRu,negative,ruby code frequently uses a platform check to choose nul on windows but since that check does not work well on jruby we help it out
JRu,negative,do nothing allow loop to retry
JRu,negative,args should be before block
JRu,negative,if the solution has changed add dsts to the work list no duplicates please which is why we have bbset
JRu,negative,option to str
JRu,negative,construct the top level execution frame and scope for the main thread
JRu,negative,should alter global state
JRu,negative,helper methods
JRu,negative,is this instruction live or dead ? during optimization passes if this instruction causes no side effects and the result of the instruction is not needed by anyone else we can remove this instruction altogether without affecting program correctness
JRu,negative,check the values obtained via different means
JRu,negative, 
JRu,negative,not true eval value and assign
JRu,negative,case rescuenode return buildrescue node m deferred case retrynode return buildretry node m deferred done
JRu,negative,done with closure compilation
JRu,negative,rb enc reg error desc
JRu,negative,explicit zero in mri returns immediately
JRu,negative,rb reg initialize
JRu,negative,we do have another slash omit both and jruby 
JRu,negative,u h hh hhh hhhh hhhhh hhhhhh
JRu,negative,in the case of two arguments mri will discard the portion of the first argument after a decimal point i e floor however in the case of a single argument any portion after the decimal point is honored
JRu,negative,first iterate over all required args
JRu,negative,are we recursing ?
JRu,negative,first char must be digit or decimal point
JRu,negative,assign the values
JRu,negative,all these types are immediately considered defined
JRu,negative,called before any write to make sure the header is always written before the first bytes
JRu,negative,newinstance here
JRu,negative,no match append remainder of buffer and continue with next block
JRu,negative,inner switch
JRu,negative,utf lead byte
JRu,negative,yylhs 
JRu,negative,should alter global state
JRu,negative,rb reg desc
JRu,negative,raise will also wake the thread from selection
JRu,negative,m x m c x m cx
JRu,negative,set up a local ruby variable
JRu,negative,negative values
JRu,negative,encountered a node we do not recognize set everything to true to disable optz
JRu,negative,eq i e false
JRu,negative,if no release method is defined then memory leaks will result
JRu,negative,no seconds just yield
JRu,negative,todo this is where we would want to do precision checks to see if it is non destructive to coerce a given type into the target integral primitive
JRu,negative,eq i e false
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string irubyobject
JRu,negative,line 
JRu,negative,must be called from synchronized locked block should only be called by variabletablestore variabletablefaststore
JRu,negative,uhhhh
JRu,negative,we may need to subtract addition offset off of first
JRu,negative,line 
JRu,negative,finally set javasupport isenabled to true
JRu,negative,switch for
JRu,negative,ca not create custom classloaders
JRu,negative,surrogates
JRu,negative,if we fail to find as a normal ruby script we try to find as an extension checking for a builtin first
JRu,negative, o oo
JRu,negative,line 
JRu,negative,set up a local iruby variable
JRu,negative,execute command with sh c this does shell expansion of wildcards
JRu,negative,xhh
JRu,negative,if there is no receiver evaluate and pass in the superclass or pass self if it no superclass
JRu,negative,switch for
JRu,negative,build the new module
JRu,negative,line 
JRu,negative,in debug mode we append dbg to class name to force it to regenerate or use pre generated debug version
JRu,negative,process any set of annotations no supported options
JRu,negative,let the width if any get processed in the next loop so any leading gets treated correctly
JRu,negative,ok got a non zero have to own up to our horded zeroes
JRu,negative,line 
JRu,negative, 
JRu,negative,case ruby hybrid backtrace threadcontext createrubyhybridbacktrace getruntime backtraceframes javastacktrace getruntime getdebug istrue break
JRu,negative,management monitoring
JRu,negative,ignore leading zeroes switch
JRu,negative,add to the jitted methods set
JRu,negative,check the visibility of the previous frame which will be the frame in which the class is being eval ed
JRu,negative,adding a post invoke for the cb result serves to both keep it alive until after the function returns and allows us to clean up the native trampoline early instead of letting them accumulate until a gc run
JRu,negative,assertsame script script 
JRu,negative,set up a local iruby variable
JRu,negative,this test really means that this is a ruby defined subclass of a java class
JRu,negative,ignore leading zeroes
JRu,negative,make the class name look nice by splitting on and capitalize each segment then joining the together without anything separating them and last put on service at the end
JRu,negative,line 
JRu,negative,for fast lookup encoding entry org jruby rubyencoding
JRu,negative,mbclen needmore p
JRu,negative,switch for
JRu,negative,set up a local iruby variable
JRu,negative,retryjump cacheentry threadcontext irubyobject irubyobject
JRu,negative,switch for
JRu,negative,other java proxy classes added under their superclass  java proxy
JRu,negative,line 
JRu,negative,here are hash internals this could be extracted to a separate class but it is not too large though
JRu,negative,set up a local iruby variable
JRu,negative,if the next scope out has the same binding scope as this scope it means we are evaling within an eval and in that case we should be sharing the same binding scope
JRu,negative,atomic integers for symbol and method ids
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string
JRu,negative,ignore switch
JRu,negative,if we know what method was being called strip everything before the call this hides the jruby and reflection internals
JRu,negative, 
JRu,negative,the replacement new allocates and inits the ruby object as before but also instantiates our proxified java object by calling jcreate
JRu,negative,ca not support the rest with java
JRu,negative,limit the length of negatives if possible also faster
JRu,negative,else catch oversize below
JRu,negative,avoid double copying for reads that are larger than the buffer size or the destination is a direct buffer
JRu,negative, 
JRu,negative,string construction routines by not byte buffer and not making the target string shared
JRu,negative,switch for
JRu,negative,mri also does a pointer comparison here
JRu,negative,an atomic long for generating dynamicmethod serial numbers
JRu,negative,irubyobject irubyobject irubyobject irubyobject rubyclass irubyobject rubyclass rubyclass irubyobject rubyclass visibility irubyobject rubyclass visibility visibility
JRu,negative,attribute set
JRu,negative,line 
JRu,negative,c x c m x
JRu,negative,by default call instructions cannot be deleted even if their results are not used by anyone unless we know more about what the call is what it does etc similarly for evals stores returns
JRu,negative,mri behavior always check whether the file is writable or not even if we are to write bytes
JRu,negative,assuming the user wants a collection of interfaces that can be included together make it so
JRu,negative,these methods below are used during compile time optimizations
JRu,negative,this covers primitives and unlikely lower case class names
JRu,negative,grab nil for local variables
JRu,negative,raw file url just open directly
JRu,negative,end of parseable data go to calc
JRu,negative,args
JRu,negative,end of parseable data go to calc
JRu,negative,not an expression only compile the elements
JRu,negative,build a new class and add it to the current scope could be a script module class
JRu,negative,define a second version that does not take a block so we have unique code paths for both cases
JRu,negative,grab nil for local variables
JRu,negative,value of tz property is of a bit different format which confuses the java is timezone gettimezone id method and so we need to convert it
JRu,negative,fill in all vars with nil so compiler is happy about future accesses
JRu,negative,check file size special files in proc have zero size and need to be handled by the generic read path
JRu,negative,multimethod new logic
JRu,negative,select appropriate call site dup receiver load self
JRu,negative,we only add live threads
JRu,negative,promise to implement three
JRu,negative,because we implement java interfaces now we need a new that is aware of those additional virtual supertypes
JRu,negative,double max exponent since java 
JRu,negative,system err println bytelisttoinum str
JRu,negative,currently dead code but useful when we figure out how to actually perform translit private static boolean istranslit string encoding return encoding tolowercase indexof translit ? true false
JRu,negative,af inet
JRu,negative,have not found a class continue on as though it were a package
JRu,negative,insert all nodes in sequence hash them in the final instruction key
JRu,negative,ruby arrays default to holding elements so we create an arraylist of the same size if we  re not told otherwise
JRu,negative,cx c m x
JRu,negative,marsaling dumps usec not msec
JRu,negative,promise to implement three to n with block
JRu,negative,low level constant interface fetch store list constants for this module
JRu,negative,base 
JRu,negative,since we do not have any other error reporting mechanism we add the error message as an always failing test to the test suite
JRu,negative,note nemes gamma can return double positive infinity or double negative infinity when value is an integer less than we treat as a special case to avoid domain error
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,ooo
JRu,negative,the converters handle not only primitive types but also their boxed versions so we should check if we have a converter before checking for isprimitive
JRu,negative,line 
JRu,negative,bindings scopes must always be manyvars scopes since evals can grow them
JRu,negative,cruby uses sprintf buf g float dig d this pattern adjusts the output of string pattern g to mimic the c version
JRu,negative,register any new blocking i o requests
JRu,negative,irubyobject protocol args 
JRu,negative,set a value in the rubyhash
JRu,negative,temp locals must start after last real local
JRu,negative,next immediate scope variable and constant scoping rules make use of this variable in different ways
JRu,negative,sign
JRu,negative,proxy is under construction building thread can safely read non volatile value
JRu,negative,eq i e false
JRu,negative,if we are setting post arguments we can assume there are no pre or others
JRu,negative,carriage return
JRu,negative,clear runtime so it does not get stuck in memory jruby 
JRu,negative,switch
JRu,negative,add script run impl used for running this script with a specified threadcontext and self root method of a script is always in file method
JRu,negative,handle everything after as arguments to the jruby process
JRu,negative,arg cannot be negative
JRu,negative,ruby is omg capture all source in a hash feature add each line to buffer when encountering newline or eof for first time
JRu,negative,line 
JRu,negative,yydgoto 
JRu,negative,must be at least one digit for strict
JRu,negative,discarding a token does not change stack
JRu,negative,one word type name that starts lower case it may be a primitive type
JRu,negative,eq i e false
JRu,negative,save sourceline for error reporting to display line where error occurred
JRu,negative,first non underscore char must be digit
JRu,negative,if we  re already aborting we can receive no further mail
JRu,negative,mask off once flag
JRu,negative,? b boolean true if file is a block device
JRu,negative,synchronize on the rubythread for threadgroup updates
JRu,negative,todo varargs ?
JRu,negative,enebo can these be fast ?
JRu,negative,line 
JRu,negative,jrubyservice
JRu,negative,make mantissa same sign so we only have one code path
JRu,negative,internal usage complex rational
JRu,negative,line 
JRu,negative,else catch oversize below
JRu,negative,long hand e g q
JRu,negative,string construction routines by not byte buffer and making the target string shared
JRu,negative,r w buffer are we reading or writing ?
JRu,negative,rubydigest
JRu,negative,case sclassnode return buildsclass node m deferred done done done done done done done done case undefnode return buildundef node m deferred done case valiasnode return buildvalias node m deferred done done
JRu,negative,assign to appropriate variable
JRu,negative,first char must be digit
JRu,negative,decrease value to hit upper range
JRu,negative,entry is the first element of this bucket
JRu,negative,keyword keyword keyword getkeyword tempval tempval length
JRu,negative,compile first node as non expr and then second node
JRu,negative,for each simple method name implement the complex methods calling the simple version
JRu,negative,caching constructors as they  re accessed for each new instance
JRu,negative,return last value from execution
JRu,negative,? z boolean true if file exists and has a zero length
JRu,negative,mri behavior
JRu,negative,define the annotation for the method
JRu,negative,basic block id cfg that this basic block belongs to all basic blocks have a starting label list of non label instructions
JRu,negative,is there a supplied proc argument or do we assume a block was supplied
JRu,negative,otherwise one key has been selected ours so we get the channel and hand it off
JRu,negative,lax str to f allows underscores between e e and sign
JRu,negative,we append an index to ensure two identical method names will not conflict
JRu,negative,file not given
JRu,negative,provider is not available
JRu,negative,we set all java methods to optional since many most have overloads
JRu,negative,implement is called to force this class to create stubs for all methods in the given interface so they will show up in the list of methods and be invocable without passing through method missing
JRu,negative,first iterate over all pre args
JRu,negative,do not override numeric div
JRu,negative,block
JRu,negative,yydgoto 
JRu,negative,the instant at which we will ask dtz what the difference between dst and standard time is
JRu,negative,finally handling for abnormal exit
JRu,negative,line 
JRu,negative,java doubles are bit long
JRu,negative,  string after last match
JRu,negative,else catch oversize below
JRu,negative,dir is used for relative path loads from a given file as in require   foo bar 
JRu,negative,fall back to system jca providers
JRu,negative,if there was a good library before we go back to that
JRu,negative,a gotcha for long min value value value
JRu,negative,block argument to the method closure present class present method table mutations def defs undef alias likely call to eval makes calls that are aware of the frame makes calls that are aware of the frame is self makes calls that are aware of the frame is visibility makes calls that are aware of the frame is block makes calls that are aware of the frame is name makes calls that set or get backref makes calls that set or get lastline makes calls that are aware of the frame is class optional arguments to the method rest arg to the method makes calls that are aware of the scope makes a zero argument super call accesses or sets constants accesses or sets class variables makes normal super call contains a retry
JRu,negative,for all uninitialized specific arities we defer to the n method which should raise appropriate error in all cases
JRu,negative,line 
JRu,negative,case ir instructions are dummy instructions all when then clauses have been converted into if then else blocks
JRu,negative,look for mangling markers for bound framed methods in class name
JRu,negative,build closure body and return the result of the closure
JRu,negative,mri behavior we do not print errno for actual errno errors
JRu,negative,numeric equal
JRu,negative,copy and splat arguments out of the scope to use for zsuper call
JRu,negative,leave it null and fall back on our normal invocation logic
JRu,negative,set of utility methods for java based proxy objects
JRu,negative,check arity in the variable arity version
JRu,negative,reset the loadtestvar
JRu,negative,all errors to sysread should be systemcallerrors but on a closed stream ruby returns an ioerror java throws same exception for all errors so we resort to this hack
JRu,negative,we were woken up without being selected poll for thread events and go back to sleep
JRu,negative,deal with case when other is not a string
JRu,negative,the is for the stripped sign char
JRu,negative,need to initialize
JRu,negative,wire up function call args to use the super fast native invokers
JRu,negative,need to initialize
JRu,negative,in method body with no containing loop issue jump error load runtime and value issue jump error
JRu,negative,need to initialize
JRu,negative,uber threadkill catcher since it should always just mean be dead
JRu,negative,need to initialize
JRu,negative,single quote fast path
JRu,negative,need to initialize
JRu,negative,this is now needed since module java is not in by default
JRu,negative,need to initialize
JRu,negative,for  foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,need to initialize
JRu,negative,how many occurrences of  type  we want
JRu,negative,make sure all arguments are modules before calling the callbacks
JRu,negative,? g boolean true if file exists and has a group ownership equal to the caller is group
JRu,negative,fall through
JRu,negative,create list of interface names to proxy and make sure they really are interfaces also build a hashcode from all classes to use for retrieving previously created impl
JRu,negative,v
JRu,negative,we depart here from strict adherence to mri code as mri uses c sprintf in part to format numeric output while we will use java is numeric formatting code and our own
JRu,negative,write volatile
JRu,negative,just push nil for pragmas
JRu,negative,receiver
JRu,negative,switch
JRu,negative,indices for temp values
JRu,negative,char hexvalue scanhex 
JRu,negative,the default allocator
JRu,negative,bench fixnum boxed fib
JRu,negative,the load method is used for loading as a top level script and prepares appropriate scoping around the code
JRu,negative,create constructorinstaller if there are no constructors it will disable construction
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,non signature signature with just irubyobject
JRu,negative,enebo is is arg but we need to break apart for support
JRu,negative,first build assignments for specific named arguments
JRu,negative,instance variable ruby methods
JRu,negative,public object invoke object receiver object arg object arg object arg object arg throw fail public object invoke object receiver object arg object arg object arg object arg object arg throw fail
JRu,negative,the counting of slashes that follows is simply a way to adhere to ruby is unc or something compatibility when ruby is expand path is called with foo bar it will return foo bar jruby uses java io file and hence returns foo bar in order to retain java io file in the lower layers and provide full ruby compatibility the number of extra slashes must be counted and prepended to the result
JRu,negative,will have a trailing    
JRu,negative,if we have more than one argument then make sure the array is not objectspaced
JRu,negative,octal constant
JRu,negative,end of hash internals
JRu,negative,x sqrt
JRu,negative,for  b foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,standard constructor that accepts ruby rubyclass
JRu,negative,strip off dot rb for rb files
JRu,negative, x fff ffff x 
JRu,negative,block yield depends on null to represent empty and nil to represent nil nil vs assert argsnode null argsnode is not null
JRu,negative,receiver
JRu,negative,we have optimized switch cases build a lookupswitch
JRu,negative,double max exponent since java 
JRu,negative,if we  ve found the last char of the separator and we  ve found at least as many characters as separator length and the last n characters of our buffer match the separator we  re done
JRu,negative,it does not handle special cases
JRu,negative,truncate buffer string to zero if provided
JRu,negative,save blocking state
JRu,negative,the java method does not care what class it is but we need to know what to convert it to so we use the object is own class if that does not help we use string to force a call to the object is to s method
JRu,negative,receiver
JRu,negative,note we change current frames visibility here because the methods which call this method are all fast e g they do not created their own frame
JRu,negative,receiver
JRu,negative,force static scope to claim restarg at so it only implements the version of file
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,on platforms without a c library accessable through jna getpid will return hashcode as used to using to kill processes could take down many runtimes but by basing on getpid where available we have the same semantics as mri
JRu,negative,save the ungot
JRu,negative,promise to implement zero to n
JRu,negative,receiver
JRu,negative,inside a loop jump to body
JRu,negative,ignore we wo not use invokedynamic
JRu,negative,we take the first method found as our n method since for any non specific arity they will all error the same if an actual n method is created we use that
JRu,negative,fill up the rest with zeroes
JRu,negative,we know variables cannot be null since localstaticscope will create a length one
JRu,negative,receiver
JRu,negative,line 
JRu,negative,invoke static file
JRu,negative,line 
JRu,negative,equivalent of t data
JRu,negative,only whitespace allowed after value for strict
JRu,negative,at end
JRu,negative,unsigned int native unsigned long native
JRu,negative,bang true no match no substitution
JRu,negative,switch
JRu,negative, e nnn e nnn
JRu,negative,we only need to pass in current scope if we are evaluating as a block which is only done for evals we need to pass this in so that we can appropriately scope down to captured scopes when we are parsing
JRu,negative,receiver
JRu,negative,note mri has a very non trivial way of calculating the precision so we use very simple approximation here
JRu,negative,v
JRu,negative,we do this b c make tmpname might be overridden
JRu,negative,receiver
JRu,negative,mri ignores seek errors presumably for unseekable files like serial ports jruby so we shall too
JRu,negative,advance to first entry
JRu,negative,remove us from old superclass is child classes
JRu,negative,self method name
JRu,negative,java is select does not do anything about this so we leave it be
JRu,negative,store argument count information into scope
JRu,negative, no match it is dot file not extension
JRu,negative,singleton methods
JRu,negative,ignore job was cancelled fixme is this ok ?
JRu,negative,in method body with no containing loop issue jump error load runtime and value issue jump error
JRu,negative,not using a new scope use saved one for a flat closure
JRu,negative,undefinedmethod should be immutable
JRu,negative,do not bother
JRu,negative,return result
JRu,negative,if we  re not the argument scope for zsuper try our parent
JRu,negative, intlen
JRu,negative,methods with required or higher should bind and be callable using reflection jruby 
JRu,negative,fall back on empty env when security disallows environment var access like in an applet
JRu,negative,out of byte range there will be no match for sure
JRu,negative,self
JRu,negative,last expression should not be void
JRu,negative,in method body with no containing loop issue jump error load runtime and value issue jump error
JRu,negative,variable args no block load null block
JRu,negative,set constants now that they  re initialized
JRu,negative,since we do not have any other error reporting mechanism we add the error message as an always failing test to the test suite
JRu,negative,undefinedmethod should be immutable
JRu,negative,load should work several times in a row
JRu,negative,receiver
JRu,negative,convert into longs returning unsigned bit values as signed longs num long raises a rangeerror on values long max value
JRu,negative,yydgoto 
JRu,negative,construct a new cache with thread is classloader and no limit
JRu,negative,get current context
JRu,negative,do not load the class if not used
JRu,negative,receiver
JRu,negative,public class hello public static string getmessage return
JRu,negative,proc class
JRu,negative,otherwise we try an unbuffered read to get whatever is available
JRu,negative,else catch oversize below
JRu,negative,we check length for  load  which does not use load path
JRu,negative,could be pulled down to rubyclass in future rb class boot
JRu,negative,we always open this rw since we can only open it r or rw
JRu,negative,jruby fail early when attempting to subclass a final java class solved here by adding an exception throwing inherited
JRu,negative,otherwise fall back on system temp location
JRu,negative,this point is only reached if there was an exception handler installed
JRu,negative,shift the decimal point just to the right of the digit to be rounded to divide by abs scale is digit is digit etc
JRu,negative,line 
JRu,negative,new exception printstacktrace
JRu,negative,add us to new superclass is child classes
JRu,negative,force t to quit just in case if it is stuck note on some platforms even interrupt might not have an effect if the thread is io blocked
JRu,negative,handle flow exceptions just propagating them
JRu,negative,mri behavior contrary to what seems to be logical when is given mri calculates the distance to the end in order to go backwards
JRu,negative,block given
JRu,negative,constructor for internal usage mainly for array array array and array uniq it does not initialize ifnone field
JRu,negative,assign the values
JRu,negative,register the new descriptor
JRu,negative,this really needs to be inlined here
JRu,negative,unfortunately the number of digits in the exponent is not clearly defined in ruby documentation this is a platform version dependent behavior on linux mac cygwin nix two digits are used on windows digits are used it is desirable for jruby to have consistent behavior and the two digits behavior was selected this is also in sync with java native sprintf behavior java util formatter e or e
JRu,negative, 
JRu,negative,libc flushes writes on any read from the actual file so we flush here
JRu,negative,only in ruby methods
JRu,negative, rb check to integer
JRu,negative,load null block
JRu,negative,just save a count of zeroes for now if no digit ends up following them they will be applied to the exponent rather than the significand and our max length for optimistic calc
JRu,negative,methods and closures
JRu,negative,line 
JRu,negative,the requested precision
JRu,negative,block given
JRu,negative,boot the module and class classes
JRu,negative,used for tiny smidgen of grammar in lexer see setparsersupport
JRu,negative,initial precision is that of double numbers e an even number of number bits precision seems to digits
JRu,negative,foo are not getting set from somewhere i want the following assert to be true though assert variablevalues offset null getting unassigned staticscope getvariables offset
JRu,negative,block given
JRu,negative,support io modes that this object was opened with
JRu,negative,m x m c x m cx
JRu,negative,no classcastexception
JRu,negative,self
JRu,negative,mri behavior with tz equal to gmt or utc time now is not considered as a proper gmt utc time env  tz  gmt time now gmt ? false env  tz  utc time now utc ? false hence we need to adjust for that
JRu,negative,we can callsite cache const missing if we want
JRu,negative,suboptimal for large hashes entries not very likely to happen
JRu,negative,self
JRu,negative,packaged protected fields and methods below
JRu,negative,declare the field
JRu,negative,note fix has only no arg form but truncate allows optional parameter
JRu,negative,assign the values
JRu,negative,line 
JRu,negative,create the class
JRu,negative,normal exit perform finally and return
JRu,negative,check arity
JRu,negative,only supports simple parallel assignment of up to values to the same number of assignees
JRu,negative,check arity
JRu,negative,this field is used during argument processing to avoid putting rubyarray instances that are purely for utility purposes into objectspace
JRu,negative,no hex value after the  x 
JRu,negative,install direct java methods with mangled name so isend  can call them directly
JRu,negative, intlen prec
JRu,negative,helper methods
JRu,negative,called only by initializing thread no synchronization required
JRu,negative,get a new label using a generic prefix
JRu,negative,invoke pre method stuff
JRu,negative,if we  re not the argument scope for zsuper try our parent
JRu,negative,always need at least a 
JRu,negative,just rethrow
JRu,negative,methods of the object class rb obj
JRu,negative,processes seem to have some peculiar locking sequences so we need to ensure nobody is trying to close destroy while we are
JRu,negative,profile
JRu,negative,equivalent of data wrap struct
JRu,negative,file given use it and force it into binding
JRu,negative,from encoding special casing ascii to ascii
JRu,negative,class allocate object is not allocatable before it is initialized
JRu,negative,if we have more than one arg make sure the array created to contain them is not objectspaced
JRu,negative,ensure the object is associated with the wrapper we found it in so that if it comes back we do not re wrap it
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,return sqrt squard with precision of rootmc
JRu,negative,rubystring aka rb string value
JRu,negative,initial x use double root multiply by halfback to unshift set new scale
JRu,negative,retrieve call site from sites array
JRu,negative, is ok float range inverted float range ? nan infinity infinity
JRu,negative,if  r  is not a constant it could actually be a compound value look in our value map to see if we have a simplified value for the receiver
JRu,negative,switch if
JRu,negative,not reached
JRu,negative,arg
JRu,negative,we can assign if we already have variable of that name here or we are the only scope in the chain which local scopes always are
JRu,negative,boot the object class
JRu,negative,special case for handling accmode since constantine will generate an invalid value if it is not defined by the platform
JRu,negative,coerce arguments
JRu,negative,block
JRu,negative,get a new label using the provided label prefix
JRu,negative,initial size state stack value stack current input tokens to shift
JRu,negative,set this class is method names in var java ovrd methods if this is the new class otherwise get method names from there if this is a proxy superclass
JRu,negative,ca not support the rest with java
JRu,negative,no binding given use for both
JRu,negative,we create one extra dynamicscope on a binding so that when we  eval b binding  the  b  will get put into this new dynamic scope the original scope does not see the new  b  and successive evals with this binding will i take it having the ability to have succesive binding evals be able to share same scope makes sense from a programmers perspective one crappy outcome of this design is it requires dynamic and static scopes to be mutable for this one case
JRu,negative,expected
JRu,negative,variables live at entry of this node variables live at exit of node temporary set of live variables size of the in and out bit sets
JRu,negative,ignore backslashed spaces in w
JRu,negative,must have been loaded from our known classloader hierarchy
JRu,negative,invert the sign since tz format and java format use opposite signs sigh also java api requires the sign to be always present be it or
JRu,negative,irubyobject dynamicmethod threadcontext irubyobject rubyclass string irubyobject
JRu,negative,tainting here if we ever want it secure 
JRu,negative,a thread pool to use for executing this runtime is ruby threads
JRu,negative,append x directory strip off text before ruby line and perhaps cd to directory n
JRu,negative,note that this object equality check is intentional to ensure the string and its interned version are the same object
JRu,negative,rb match busy
JRu,negative,assert internedsymbol internedsymbol intern internedsymbol is not interned
JRu,negative,allow proxy to be read without synchronization if proxy is under construction only the building thread can see it
JRu,negative,does this instruction have side effects as a result of its operation this information is used in optimization phases to impact dead code elimination and other optimization passes
JRu,negative,construct local variables based on parameter names passed in
JRu,negative,if any exceptions were raised we fail
JRu,negative,always need at least a 
JRu,negative,if we  re running from within an ide we may not have the rb files in our classpath try to find them in the filesystem instead
JRu,negative,error string
JRu,negative,extra args for rest
JRu,negative,block
JRu,negative,line 
JRu,negative,label for the start of the method label for the end of the method
JRu,negative,use array as is it is a literal array
JRu,negative,let m be the exact digits precision in an earlier loop
JRu,negative,bench straight up integer fib 
JRu,negative,for  foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,bench integer fib
JRu,negative,reset the state
JRu,negative,save package module as ivar in parent and add method to parent so we do not have to come back here
JRu,negative,obtain d
JRu,negative,line token constants
JRu,negative, 
JRu,negative,comparisons checks checks if the operand is non null and non false eqq a call used only for its conditional results as in case when begin rescue
JRu,negative,fixme jruby 
JRu,negative,store call information so method missing impl can use it
JRu,negative,use parent is marshal
JRu,negative,actual required is greater than raise error we do not support actual required 
JRu,negative,switch if
JRu,negative,initial size state stack value stack current input tokens to shift
JRu,negative,tries to load at compile time the constant referred to by  constref  this might be possible if the constant is defined and is not a forward reference to a value that will be defined later in the class
JRu,negative,a scoped location of this variable high bits is how many scopes down and low bits is what index in the right scope to set the value
JRu,negative,   
JRu,negative,mri behavior week values are monotonous so weeks that effectively belong to previous year will get the value of not or as in java
JRu,negative,build scope names string
JRu,negative,do not bother
JRu,negative,arg grouping use slower arg walking logic
JRu,negative,for nodes do not have their own scope so we pass null to indicate this  for is are implemented as blocks in evaluation but they have no scope so we just deal with this lack of scope throughout its lifespan we should probably change the way this works to get rid of multiple null checks
JRu,negative,always use gmt since that is required by java api
JRu,negative,explicitly use utf here c f history addtohistory using line asutf 
JRu,negative,remaining arguments are for the script itself
JRu,negative,assertequals foo n bar eval h each val p val assertequals foo bar eval p h each val
JRu,negative,line 
JRu,negative,if an io exception occurs something odd but possible a directory may return null
JRu,negative,all done with lookup attempts release monitor
JRu,negative,select appropriate call site dup receiver load self
JRu,negative,yydefred 
JRu,negative,notify the calling thread that we  re about to go to sleep the first time
JRu,negative, tags addr eos
JRu,negative,line 
JRu,negative,use numbered access method
JRu,negative,keep a reference to the temporary memory in the cache so it does not get freed by the gc until the struct is freed
JRu,negative,obtain c
JRu,negative,classid is the name of the class module sans where it is located if it is null then it an anonymous class
JRu,negative,here we create an anonymous exception type used for unrolling the stack mri creates a new one for every call to timeout which can be costly we opt to use a single exception type for all cases to avoid this overhead
JRu,negative,mri ignores seek errors presumably for unseekable files like serial ports jruby so we shall too
JRu,negative,finally
JRu,negative,start off with a neutral parent
JRu,negative,static private final string translit translit
JRu,negative,set a value in the rubyhash
JRu,negative,double precision native
JRu,negative,value of last token which had a value associated with it
JRu,negative,obtain a
JRu,negative,rename is successful
JRu,negative,not enough bytes
JRu,negative,specialized for value
JRu,negative,must let original string know we  re modifying so shared buffers are not damaged
JRu,negative,must be at least one digit for strict
JRu,negative,each root node has a top level scope that we need to push
JRu,negative,switch for no more data ok for strict to go calc
JRu,negative,treat start and end as start end for end start end for end 
JRu,negative,return warnmultireturnnil ruby
JRu,negative,line 
JRu,negative,ruby ignores empty syswrites
JRu,negative,specific arity
JRu,negative,push if you look at original macro stack n stack no change
JRu,negative,todo rb enc symname p
JRu,negative,if adding a module under a constant name set that module is basename to the constant name
JRu,negative,common variable methods
JRu,negative,not that is loaded loop around to resolve it next pass
JRu,negative,line 
JRu,negative,is there a supplied proc argument or do we assume a block was supplied
JRu,negative,if more than locals get the locals array too
JRu,negative,limit each iteration to a max of bulk read size to avoid over size allocations
JRu,negative,should we run this pass on the current scope before running it on nested scopes ?
JRu,negative,actualpath new file rubyfile expanduserpath runtime getcurrentcontext reportedpath
JRu,negative,not so backwards compatible here but no one should have been calling this anyway
JRu,negative,open up the  to java  and  as  coercion methods on ruby objects via kernel
JRu,negative,update superclass reference
JRu,negative,load always uses irubyobject so simple closure offset calculation here
JRu,negative,yydgoto 
JRu,negative,only this case affects backrefs
JRu,negative,methods of the nil class nil
JRu,negative,happens with native exceptions should not filter those out
JRu,negative,let rescuedblock continue
JRu,negative,declare those components as beans in bsf then it will be possible to access those components in ruby as global variables frame menubar
JRu,negative,let rescuedblock continue
JRu,negative,represents the the dynamic portion of scoping information the variablevalues are the values of assigned local or block variables the staticscope identifies which sort of scope this is block or local properties of dynamic scopes static and dynamic scopes have the same number of names to values size of variables and thus names is determined during parsing so those structured do not need to change fixme when creating dynamic scopes we sometimes accidentally pass in extra parents this is harmless other than wasting memory but we should not do that we can fix this in two ways fix all callers check parent that is passed in and make if new instance is local then its parent is not local
JRu,negative,c bind eval
JRu,negative,if r n then just pass along n windows if r n then pass along n mac
JRu,negative,write volatile
JRu,negative,this is pretty inefficient for building an array so just raise an error if someone is using it for a lot of elements
JRu,negative,write volatile
JRu,negative,tries to load at compile time the constant referred to by  constref  this might be possible if the constant is defined and is not a forward reference to a value that will be defined later in the class
JRu,negative,utility methods
JRu,negative,try to load the specified name only if that fails try to define the class
JRu,negative,utility methods
JRu,negative,if it is a singleton class and the real class is proc we  re doing closure conversion so just use proc is hashcode
JRu,negative,write volatile
JRu,negative,check for thread events in case we  ve been woken up to die
JRu,negative,write volatile
JRu,negative,we do both writable and writable real through the same method because in our java process effective and real userid will always be the same
JRu,negative,write volatile
JRu,negative,module methods
JRu,negative,write volatile
JRu,negative,remove the executor task now to avoid cancelled tasks accumulating until an executor thread can schedule and remove them
JRu,negative,write volatile
JRu,negative,promise to implement two to n with block
JRu,negative,write volatile
JRu,negative,but there is a superclass passed in use it
JRu,negative,? w boolean true if file exists and is writable by effective uid gid
JRu,negative,fall through
JRu,negative,do nothing fall back on default compiler below
JRu,negative,call throwexception via jruby
JRu,negative,assume ninit prec
JRu,negative,add aliases in type nativetype and ffi type
JRu,negative,we set scope aware to true to force heap based locals
JRu,negative,normal file descriptor try to work with it
JRu,negative,do nothing fall back on default compiler below
JRu,negative,rubygems is too specific on host cpu so until we have real need lets default to universal setconfig confighash arch system getproperty os arch java system getproperty java specification version
JRu,negative,if more than locals get the locals array too
JRu,negative,switch
JRu,negative,invalid ranges result in an empty string
JRu,negative,close process output see jruby hooking up to parent process stdin caused problems for irb etc using stdin
JRu,negative,this is needed to unpack stuff
JRu,negative,refresh call adapter since it matters if this is iter based or not
JRu,negative,add property name aliases
JRu,negative,complete the request by filling the read buffer first
JRu,negative,rehash the table if the threshold is exceeded
JRu,negative,ordering of array traversal not important just intuitive
JRu,negative,we already confirmed above that length 
JRu,negative,if there is exactly one callback argument to the function then a block can be given and automatically subsituted for the callback parameter
JRu,negative,jrubymethod name new meta true visibility visibility private
JRu,negative, k seems to be the minimum at which the stat seek is faster than reallocation
JRu,negative,ruby interpreter compatibilty usage ruby switches programfile arguments
JRu,negative,define system getproperties in env java
JRu,negative,instance methods
JRu,negative,this point is only reached if there was an exception handler installed
JRu,negative,jrubymethod name exact ?
JRu,negative,terminate and advance buffer when we find our char
JRu,negative,jrubymethod name new meta true visibility visibility private
JRu,negative,if there is no second argument simply use the working directory of the runtime
JRu,negative,instance methods
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,instance methods
JRu,negative,wow the only time we can use the java protocol
JRu,negative,internal variable methods
JRu,negative,makes sure the key is not already in the hashtable
JRu,negative,if more than locals get the locals array too
JRu,negative,check for special shell characters at the beginning and end of each command word and do not run in process if we find them
JRu,negative,should we run this pass on the current scope before running it on nested scopes ?
JRu,negative,there is something valid in the sun path component
JRu,negative,try lookup again under lock
JRu,negative,system err println figureoutbase base base
JRu,negative,symbol class methods
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,nested class whose instances act as thunks reacting to to str method called from exception to str exception message mri equivalent rb cnameerrormesg class name message construction method to str implementation name err mesg to str todo this class should not be lookupable
JRu,negative,no block from a nil proc
JRu,negative,setting the loader needs to reset the class cache
JRu,negative,make sure the main stream is set to null
JRu,negative,until we get a little more solid on support we will only run interpreted mode
JRu,negative,this method is intended only for defining new classes in ruby code so it uses the allocator of the specified superclass or default to the object allocator it should not be used to define classes that require a native allocator
JRu,negative,yysindex 
JRu,negative,first char must be digit or decimal point
JRu,negative,yygindex 
JRu,negative,bench fully boxed fib
JRu,negative,backspace
JRu,negative,load target for invocations
JRu,negative,not reached
JRu,negative,void methods should work
JRu,negative,verify it if it is there
JRu,negative,difficult case send to double floatingdecimal
JRu,negative,else catch oversize below
JRu,negative,init
JRu,negative,yygindex 
JRu,negative,switch
JRu,negative,yygindex 
JRu,negative,asserttrue rubyobject kind of ruby getclasses getstringclass isfalse
JRu,negative,from commandlineparser
JRu,negative,adjust for buffered data
JRu,negative,v g v sqrt
JRu,negative,switch while
JRu,negative,package private
JRu,negative,getsimplifiedoperand returns the value of this operand fully simplified getsimplifiedoperand returns the operand in a form that can be materialized into bytecode if it cannot be completely optimized away the value is used during optimizations and propagated through the ir but it is thrown away after that but the operand form is used for constructing the compound objects represented by the operand example a b c a b d c getvalue c getsimplifiedoperand c b getvalue d getsimplifiedoperand d c note that a b c d are all objects and c has a reference to objects a and b and d has a reference to c so if contents of a or b is modified the simplified value s of c and d also change this difference is captured by these two methods
JRu,negative,yysindex 
JRu,negative,if the length is not a multiple of we need to pad the last byte
JRu,negative,yylen 
JRu,negative,int n 
JRu,negative,x e v sqrt
JRu,negative,jruby associate future early so it shows up in thread list right away in case it does not run immediately
JRu,negative,increase precision next iteration supplies n exact digits
JRu,negative,the datastruct is a place where custom information can be contained for core implementations that does not necessarily want to go to the trouble of creating a subclass of rubyobject the openssl implementation uses this heavily to save holder objects containing java cryptography objects java integration uses this to store the java object ref protected transient object datastruct
JRu,negative,initial v the reciprocal v x
JRu,negative,estimate the square root with the foremost bits of squard bi and scale are a tandem
JRu,negative,mri issuses warning here on rbignum x len sizeof bdigits yy 
JRu,negative,function not used but it gets rid of unused warnings in eclipse we do call those methods from ruby so they are not really unused
JRu,negative,collect iteration precisions beforehand
JRu,negative,skip this one probably no  ls  windows
JRu,negative,just in case add a bit of extra precision
JRu,negative,block argument assignment if there is a block arg
JRu,negative,general number and precision checking
JRu,negative,run ten separate calls into ruby with delay and explicit gc
JRu,negative,if the killee thread is the same as the killer thread just die
JRu,negative,wait until thread has initialized
JRu,negative,the name of this source e g a filename foo rb
JRu,negative,do nothing
JRu,negative,note mri is sqrt precision is limited by but we allow values more than 
JRu,negative,mri behavior raise argumenterror for  unknown command  before checking number of args
JRu,negative,this should only be called by this and rubyfile it allows this object to be created without a iohandler
JRu,negative,calculation for negatives when u specified for values integer min value mri uses the equivalent of long neg u long integer max value val for smaller values biginteger math is required to conform to mri is result
JRu,negative,line 
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,sync flush
JRu,negative,unread back
JRu,negative,line 
JRu,negative,look in classpath next we do not use file as a test since unc names will match note jar resources must never begin with an previous code said always begin with a
JRu,negative,note that addmethod now does its own put so any change made to functionality here should be made there as well
JRu,negative,ok
JRu,negative,line 
JRu,negative,add a forward reference from tgt currbb
JRu,negative,yysindex 
JRu,negative,beneath are rewritten coercions that reflect mri logic the aboves are used only by rubybigdecimal
JRu,negative,empirically it appears that to ary coersions always return array or nil so this should always be an array by now
JRu,negative,line 
JRu,negative,rethrow to outer flow catcher
JRu,negative,todo make it now ? must be power of 
JRu,negative,this is legal when removing an undef
JRu,negative,interrupt the target thread in case it is blocking or waiting warning we no longer interrupt the target thread since this usually means interrupting io and with nio that means the channel is no longer usable we either need a new way to handle waking a target thread that is waiting on io or we need to accept that we ca not wake such threads and must wait for them to complete their operation threadimpl interrupt
JRu,negative,line 
JRu,negative,channeldescriptors opened by sysopen are cached to avoid collection
JRu,negative,yyrindex 
JRu,negative,ensure we have a new interpreter for each test previous we were using the same interpreter which caused problems as soon as one test failed
JRu,negative,yylen 
JRu,negative,we do not want a package name beginning with dots so we remove them
JRu,negative,not reached
JRu,negative,make sure the pipe stream is set to null
JRu,negative,getfoo foo getfoo int foo int
JRu,negative,callbacks to fill in method body
JRu,negative,eq i e false
JRu,negative,make a nil node if no body notice this is not part of ast
JRu,negative,not reached
JRu,negative,fall through
JRu,negative,returns nil if backtrace is not an array
JRu,negative,ruby uses qnil here we use dummy because we need a class
JRu,negative,if it is an inner class and it is not public we ca not access it skip population of declared elements
JRu,negative,if this is not a closure the break is equivalent to jumping to the loop end label
JRu,negative,not reached
JRu,negative,do not open as  rw  by default since a file with read only permissions will fail on  rw 
JRu,negative,not reached
JRu,negative,bench long fib
JRu,negative,in the current logic if we get here we know that module is not an includedmodulewrapper so there is no need to fish out the delegate but just in case the logic should change later let is do it anyway
JRu,negative,leave as a normal array
JRu,negative,not reached
JRu,negative,switch on the object is native type this allows use defined classes that have extended core native types to piggyback on their marshalling logic
JRu,negative,not reached
JRu,negative,note we ca not use file exists to check whether the symlink exists or not because that method returns false for existing but broken symlink so we try without the existence check but in the try catch block mri behavior symlink ? on broken symlink should return true
JRu,negative,not reached
JRu,negative,case signature sig object class object class object class object class object class break case signature sig object class object class object class object class object class object class break
JRu,negative,not reached
JRu,negative,create a lightweight thunk
JRu,negative,not reached
JRu,negative,contains a list of all blocks as procs that should be called when the runtime environment exits
JRu,negative,not reached
JRu,negative,all the positive powers of that can be represented exactly in double float from sun misc floatingdecimal java
JRu,negative,not reached
JRu,negative,there might be more test classes in a single file so we iterate over them
JRu,negative,not reached
JRu,negative,silence
JRu,negative,rethrow exception rethrow it
JRu,negative,only whitespace allowed after value for strict
JRu,negative,this is needed when the enclosing class or module is a singleton in that case we generated a name such as null foo which broke marshalling among others the correct thing to do in this situation is to insert the generate the name of form class xasdfasd if it is a singleton module class which this code accomplishes
JRu,negative,no digits error
JRu,negative,this is the only case it might be null here in metaclass construction
JRu,negative, do not set permissions
JRu,negative,error position
JRu,negative,if we get here the class and field exist construct our unsafe impl that calls it directly
JRu,negative,generate a real method signature for the method with to from coercions
JRu,negative,wait for the go signal
JRu,negative,if already inspecting there is no need to register unregister again
JRu,negative,note intentionally returning the actual array returned from java rather than wrapping it in a rubyarray wave of the future when java class will return the actual class rather than a javaclass wrapper
JRu,negative,done with closure compilation
JRu,negative,switch
JRu,negative,line 
JRu,negative,add alias to meta
JRu,negative,snapshot of contents of directory current position in directory
JRu,negative,first char must be digit or decimal point
JRu,negative,a while node could receive non local flow control from any of these a closure within the loop an eval within the loop a block arg based proc called within the loop
JRu,negative,if channel is already closed we  re no longer valid
JRu,negative,indices for temp values
JRu,negative,head must not be null and there must be no args like arg
JRu,negative,exclusive locks in java require the channel to be writable otherwise an exception is thrown terminating jruby execution but flock behavior of mri is that it allows exclusive locks even on non writable file so we convert exclusive lock to shared lock if the channel is not writable to better match the mri behavior
JRu,negative,append what we read into our buffer and allow the loop to continue
JRu,negative,zero args no block do nothing
JRu,negative,we do not support so but some stdlib require so directly replace it with jar to look for an extension type we do support
JRu,negative,store previous exception for restoration if we rescue something
JRu,negative,label for the start of the closure used to implement redo label for the end of the closure used to implement retry
JRu,negative,a specific version was requested use as is for search
JRu,negative,then deliver mail to the target
JRu,negative,set self to the class
JRu,negative,confirm minimum args provided
JRu,negative,public fields methods
JRu,negative,predefine a few other methods we invoke directly elsewhere
JRu,negative,yyrindex 
JRu,negative,line token constants
JRu,negative,do nothing
JRu,negative,force heap scope behavior since it uses parent is scope
JRu,negative,do nothing
JRu,negative,if we do not have a body check for required or opt args if opt args they could have side effects if required args need to raise errors if too few args passed otherwise method does nothing make it a nop
JRu,negative,check the visibility of the previous frame which will be the frame in which the class is being eval ed
JRu,negative,check the visibility of the previous frame which will be the frame in which the class is being eval ed
JRu,negative,creates the new entry
JRu,negative,and we were given a specific exception
JRu,negative,finally with no exception
JRu,negative,compute meet over all sources and compute destination basic blocks that should then be processed sources targets depends on direction of the data flow problem
JRu,negative,todo varargs ?
JRu,negative,bang true no match no substitution
JRu,negative,todo varargs ?
JRu,negative,only whitespace allowed after value for strict
JRu,negative,accessor methods
JRu,negative,declare locals for java debugging purposes
JRu,negative,mri behavior
JRu,negative,silent ?
JRu,negative,mri behavior
JRu,negative,no check for    
JRu,negative,not a class
JRu,negative,assert internedname internedname intern internedname is not interned
JRu,negative,mri behavior
JRu,negative,no digits go calc will return for lax
JRu,negative,ruby uses qnil here we use dummy because we need a class
JRu,negative,loop until a context is available to clean up softrefs that might have been collected
JRu,negative,not a class
JRu,negative,pop extra failed value from first cycle and we  re done
JRu,negative,version information
JRu,negative,could not get canonical path just use given path
JRu,negative,line 
JRu,negative,system err println adding char char cx with number cx
JRu,negative,io available only returns after eof is encountered so we need to differentiate between the empty string and eof
JRu,negative,the assumption here is that the  in  stream provides proper available support if available always returns we will hang
JRu,negative,if it is less than do median of 
JRu,negative,store the local vars in a local variable for preparing the class using previous scope
JRu,negative,constant api methods
JRu,negative,let the width if any get processed in the next loop so any leading gets treated correctly
JRu,negative,yysindex 
JRu,negative,class ? script defaultmethod runtime getobject getmethods get foo getjitcompilerscript getclass class ? script defaultmethod runtime getobject getmethods get foo getjitcompilerscript getclass
JRu,negative,low level class variable interface fetch store list class variables for this module
JRu,negative,position within source must reflect the actual offset and column since we ate an extra character here this accounting is normally done in read we should update position info
JRu,negative,no read requested hook up read to parents output
JRu,negative,prepare loadservice and load path
JRu,negative,used only by the compiler interpreter will set the literal flag
JRu,negative,and subtract as neeeded
JRu,negative,range each func range step i b e args
JRu,negative,digits arr shifted update all
JRu,negative,yygindex 
JRu,negative,sss fixme can this ever be null ?
JRu,negative,mri behavior just plain or are considered illegal on windows
JRu,negative,num int is also implemented
JRu,negative,what we passed to the constructor for method  path 
JRu,negative,install direct java methods with mangled name so isend  can call them directly
JRu,negative,new exception printstacktrace
JRu,negative,check visibility dup method
JRu,negative,ruby instance methods
JRu,negative,mri behavior be default digits in the exponent use digits only when necessary see comment for writeexp method for more details
JRu,negative,constant table methods pass to delegate
JRu,negative,exec needs to behave differently in process because it is technically supposed to replace the calling process so if we  re supposed to run in process we allow it to use the default streams and not use pumpers at all see jruby and jruby 
JRu,negative,this relies on the ruby rounding enumerations java ones which they currently all are
JRu,negative,it is either as converted as we can make it via above logic or it is not one of the types we convert so just pass it out as is without wrapping
JRu,negative,a gotcha
JRu,negative,now we provide default impls of a number of signatures for each arity we first generate a non block version of the method which just adds null block and re calls allowing e g compiled code which always can potentially take a block to only generate the block receiving signature and still avoid arg boxing we then provide default implementations of each block accepting method that in turn call the irubyobject block version of call this then finally falls back on the minimum implementation requirement for dynamic method handles
JRu,negative,we get canonical path to try and flatten the path out a dir   subdir   should return as cnutter do we want to flatten path out ?
JRu,negative,this should only be called by this and rubyfile it allows this object to be created without a iohandler
JRu,negative,cx c m x
JRu,negative,base
JRu,negative,used for the  redo  command
JRu,negative,by default no flush
JRu,negative,used for the  redo  command
JRu,negative,line 
JRu,negative,push false
JRu,negative,mri behavior
JRu,negative,false zero
JRu,negative,make sure any read s after close fail
JRu,negative,no passed in block lets check next outer frame for one  proc new 
JRu,negative,line 
JRu,negative,this looks wrong but it is the way mri does it
JRu,negative,for future compatibility as constructors move toward not accepting metaclass ?
JRu,negative,proc class
JRu,negative,note the indicies here match exactly the signal values do not reorder
JRu,negative,rb exc new 
JRu,negative,visit a label to start scoping for local vars in this method
JRu,negative,mri behavior in finished mode we work as pass through
JRu,negative,zstream actually is not allocatable
JRu,negative,mri behavior enforced by tests
JRu,negative,todo varargs ?
JRu,negative,registerthreaddumpsignalhandler runtime
JRu,negative,dump usec not msec
JRu,negative,handle ruby exceptions raiseexception
JRu,negative,io finish
JRu,negative,biginteger required a sign byte in incoming array
JRu,negative,modified to match how hash is calculated in 
JRu,negative,retry handling in the rescue block
JRu,negative,we only want io objects with valid streams better to error now
JRu,negative,float number of seconds
JRu,negative,if we define a class in ruby but later want to allow it to be defined in java the allocator needs to be updated
JRu,negative,we can just use dt since it is immutable
JRu,negative,produce a nicer error since rubyists are not used to seeing this
JRu,negative,for jdk we can use cal gettimeinmillis
JRu,negative,set up with min values and then add to allow rolling over
JRu,negative,pad with a 
JRu,negative,mri accepts additional wday argument which appears to be ignored
JRu,negative,if we might be moving this time from dst dst the offset is assumed to be the same as it was just before we last moved from dst dst
JRu,negative,no bignorm here needed
JRu,negative,ignores usec if args for compatibility with parsedate or if not supplied
JRu,negative,time class methods
JRu,negative,if the value will fit in a fixnum return one of those
JRu,negative,utility methods
JRu,negative,mri issuses warning here on rbignum x len sizeof bdigits yy 
JRu,negative,attempt to decriticalize all if we  re the critical thread
JRu,negative,depends on io filetest
JRu,negative,instance methods
JRu,negative,? ? ?
JRu,negative,len margin
JRu,negative,volatile to ensure that initial nil fill is visible to other threads
JRu,negative,elements and trailing nils
JRu,negative,plain internal array assignment
JRu,negative,dir tmpdir
JRu,negative,value
JRu,negative,plain internal array assignment
JRu,negative,value
JRu,negative,rb ary new just allocates the internal array
JRu,negative,value
JRu,negative,plain internal array assignment
JRu,negative,newobj and objsetup equivalent fastest one for shared arrays optional objectspace
JRu,negative,pid
JRu,negative,array constructors taking the metaclass to fulfil mri array subclass behaviour
JRu,negative,not reached
JRu,negative,create global constants and variables
JRu,negative,yysindex 
JRu,negative,not reached
JRu,negative,satisfy java util list interface for java integration
JRu,negative,not reached
JRu,negative,windows does not support these functions so we wo not even try this also matches ruby behavior for jruby 
JRu,negative,see ruby core 
JRu,negative,possibly should not in object space
JRu,negative, seems to just do inspect for to s now
JRu,negative,rb ary new 
JRu,negative,? ? ? boolean
JRu,negative,see ruby core 
JRu,negative,gmt etc gmt see mri behavior comment below
JRu,negative,yylen 
JRu,negative,pre set for the sake of terminating recursive calls
JRu,negative,extras flag
JRu,negative,nothing
JRu,negative,see http www gzip org zlib rfc gzip html
JRu,negative,zlib no flush
JRu,negative,utility method
JRu,negative,object is ready create top self
JRu,negative,not to be confused with rubyobject is flags
JRu,negative,yylhs 
JRu,negative, include ?
JRu,negative,the method is intentionally not public since it typically should not be used outside of the core
JRu,negative,flags bytes of modified time
JRu,negative,instance methods
JRu,negative,rubyclasspathvariable
JRu,negative,value
JRu,negative,it wo not hurt fixnums
JRu,negative,mri does it
JRu,negative,wo not hurt fixnums
JRu,negative,second argument is allowed but ignored mri
JRu,negative,recheck condition
JRu,negative,initialize kernel and include into object
JRu,negative,terminate trycompile will have printed out an error and we  re done
JRu,negative,used for the  redo  command
JRu,negative,initialize the root of the class hierarchy completely
JRu,negative,construct key services
JRu,negative,initialize the dummy class used as a marker
JRu,negative,get the main threadcontext gets constructed for us
JRu,negative,initialize all the core classes
JRu,negative,event name filename line numbers should be based
JRu,negative,default do not retain
JRu,negative,we try to get the classloader that loaded jruby falling back on system
JRu,negative,bootstrap the top of the hierarchy
JRu,negative,for regular expressions with the o flag
JRu,negative,determine spacing
JRu,negative,this method is for finalizers registered via objectspace
JRu,negative,for jsr support see http scripting java net
JRu,negative,use this for jruby internal finalizers
JRu,negative,mutex that controls modifications of user defined finalizers
JRu,negative,record separator var to speed up io ops that use it
JRu,negative,former java lang system concepts now internalized for mvm
JRu,negative,default objects
JRu,negative,initial spaces spaces before at
JRu,negative,ca not read non standard properties
JRu,negative,java support
JRu,negative,compilation
JRu,negative,parser stats
JRu,negative,mutex that controls modifications of internal finalizers
JRu,negative,a global object lock for class hierarchy mutations
JRu,negative,line 
JRu,negative,compensate for missing slash after drive letter on windows
JRu,negative,kernel is the only module that does not need an implementor
JRu,negative,iso jp
JRu,negative,enc coderange asciionly
JRu,negative,quoted printable
JRu,negative,note this field and the following static initializer must be located be in this order
JRu,negative,shift jis
JRu,negative,iso jp
JRu,negative,out of byte range there will be no match for sure
JRu,negative,utf 
JRu,negative,euc jp
JRu,negative,utf 
JRu,negative,string does not have it is own bytelist values
JRu,negative,string does not share any resources
JRu,negative,shift jis
JRu,negative,euc jp
JRu,negative,rb enc str asciionly p
JRu,negative,use impl
JRu,negative,must not reallocate
JRu,negative,rb enc str coderange
JRu,negative,if len then shared empty
JRu,negative,rb str subseq
JRu,negative,this really needs to be inlined here
JRu,negative,rb str cmp m
JRu,negative,rb str buf append
JRu,negative,encoding does not have to be copied
JRu,negative,copy pre match substr
JRu,negative,todo keep cr todo rb str splice 
JRu,negative,block given
JRu,negative,string given
JRu,negative,substring longer than string
JRu,negative,illegal combination
JRu,negative,hash given
JRu,negative,this represents left most digit in a set of incremented values ? therefore leftmost numeric must be and not not whereas chars should be zzz aaaa and non alnum byte values should be 
JRu,negative,create constants class
JRu,negative,rb str substr
JRu,negative,rb str splice
JRu,negative,nothing
JRu,negative,nothing
JRu,negative,decode from from and encode to to
JRu,negative, 
JRu,negative,line 
JRu,negative, 
JRu,negative,only this case affects backrefs
JRu,negative,create a lightweight thunk
JRu,negative,check the length every iteration since the block can modify this string
JRu,negative,to encoding same special casing
JRu,negative,retrieve last replacer
JRu,negative,long size bits in byte
JRu,negative,qtrue
JRu,negative,we need this loop in order to be able to unblock the join call without actually calling interrupt
JRu,negative,file to be loaded by autoload has already been or is being loaded
JRu,negative,interned ok for fast methods
JRu,negative,no catch active for this throw
JRu,negative,no binding given use eval
JRu,negative,file given use it and force it into binding
JRu,negative,catch active throw for catch to handle
JRu,negative,rb cstr to dbl case
JRu,negative,we break if we know this sleep was explicitly woken up interrupted
JRu,negative,zero sleeps forever
JRu,negative,exec process create io with process
JRu,negative,bomb out it is not a binding or a proc
JRu,negative,adjusts paths started with or on windows
JRu,negative,? g boolean true if file has the cf setgid bit
JRu,negative,string to eval
JRu,negative,binding given use binding is file
JRu,negative,mri behavior now check arg count
JRu,negative,modified
JRu,negative,mri behavior use first byte of string value if len 
JRu,negative,ignore if it is not a global var
JRu,negative,? c time last change time for file 
JRu,negative,? a time last access time for file 
JRu,negative,? c boolean true if file is a character device
JRu,negative,? e boolean true if file exists
JRu,negative,? f boolean true if file exists and is a regular file
JRu,negative,? k boolean true if file exists and has the sticky bit set
JRu,negative,? o boolean true if file exists and is owned by the caller is effective uid
JRu,negative,? m time last modification time for file 
JRu,negative,modified
JRu,negative,? r boolean true if file is readable by the effective uid gid of the caller
JRu,negative,without full tracing many events will not fire
JRu,negative,? p boolean true if file exists and is a fifo
JRu,negative,if the target thread is sleeping or stopped wake it
JRu,negative,wrapped to search next valid char
JRu,negative,jrubymethod name new meta true visibility visibility private
JRu,negative,we limit to int because bytebuffer can only allocate int sizes
JRu,negative,ne nonzero i e true
JRu,negative,keep cr ?
JRu,negative,no need to assign encoding same bytelist shared
JRu,negative,? x boolean true if file exists and is executable by the real uid gid
JRu,negative,? x boolean true if file exists and is executable by the effective uid gid
JRu,negative,? boolean true if the modification times of file and file are equal
JRu,negative,deprecated string construction routines
JRu,negative,? boolean true if the modification time of file is after that of file 
JRu,negative,? boolean true if the modification time of file is prior to that of file 
JRu,negative,error info is per thread
JRu,negative,set to default thread group
JRu,negative,new interrupt to hopefully wake it out of any blocking io
JRu,negative,init errorinfo to nil
JRu,negative,if this thread is sleeping or stopped wake it
JRu,negative,jruby associate thread early so it shows up in thread list right away in case it does not run immediately
JRu,negative,for thread start which does not call the subclass is initialize
JRu,negative,line 
JRu,negative,file class methods
JRu,negative,create constants for flock
JRu,negative,count number of extra slashes in the beginning of the string
JRu,negative,strip off the o prefix so they become file rdonly and so on
JRu,negative,check for thread events in case we  ve been woken up to die
JRu,negative,not valid for dead state
JRu,negative,ca not select just have to do a blocking call
JRu,negative,null channel always succeeds for all locking operations
JRu,negative,make sure any existing lock is released before we try and close the file
JRu,negative,file constants module is included in io
JRu,negative,we use file versus io to match t file in mri
JRu,negative,try both
JRu,negative,should we do anything ?
JRu,negative,line 
JRu,negative,it does not handle special cases
JRu,negative,we  re not actually a real file so we ca not flock
JRu,negative,round to that digit
JRu,negative,method invokeinterface p irubyobject class getinstancevariable sig irubyobject class params string class
JRu,negative,return false here
JRu,negative,return false here
JRu,negative,strip c away from relative pathed name
JRu,negative,mri compatible basename handling for windows drive letter paths
JRu,negative,compensate for missing slash after drive letter on windows
JRu,negative,trim trailing slashes
JRu,negative,handle user paths
JRu,negative,dot is not at beginning and not at end of filename
JRu,negative,find out which string to check
JRu,negative,fnfexception can be thrown in both cases when the file is not found or when permission is denied
JRu,negative,java and mri definitions of divmod are different
JRu,negative,include additional path separator so that dirname of c file txt is c not c
JRu,negative,handle user paths
JRu,negative,no directory delimeter rest of string is username
JRu,negative,generation count for o clears
JRu,negative,c is returned unchanged
JRu,negative,rubycontinuation
JRu,negative,special constructor that accepts stream not channel
JRu,negative,    as path to expand
JRu,negative,we do not have another slash after this so replace with
JRu,negative,  user   as path to expand
JRu,negative,if there are n slashes then we want n 
JRu,negative,no canonical path yet or length is zero and we have a followed by a dot
JRu,negative,do nothing we should not delete the drive letter
JRu,negative,rb check modifiable
JRu,negative,rb readable
JRu,negative,rename via java api call was not successful let is try some tricks similar to mri
JRu,negative,can we produce ioerror which bypasses a close ?
JRu,negative,fast path since jna stat is about x slower than this
JRu,negative, mri ignores the trailing junk
JRu,negative,try to rename one more time
JRu,negative,n b we need to recompute the hash in case the key object was modified
JRu,negative,
JRu,negative,delete implementation
JRu,negative,
JRu,negative,get implementation
JRu,negative,put implementation
JRu,negative,instance methods
JRu,negative,other hash does not contain key
JRu,negative,update the hash value
JRu,negative,single as whole path to expand
JRu,negative,nio based
JRu,negative,default do not retain
JRu,negative,we only want io objects with valid streams better to error now
JRu,negative,yysindex 
JRu,negative,first try as directory
JRu,negative,next as regular file
JRu,negative,do nothing fd cloexec has no meaning in jvm since we cannot really exec and why the hell does webrick pass this in as a first argument
JRu,negative,dup new fd into self to preserve fileno and references to it
JRu,negative,nio based
JRu,negative,todo read check from mri
JRu,negative, 
JRu,negative,not exposed by filetest but so similiar in nature that it is stored here
JRu,negative,confirm we  re not reopening self is channel
JRu,negative,re register since fileno points at something new now
JRu,negative,default options
JRu,negative,re register the descriptor
JRu,negative,redundant done above as well
JRu,negative,use original modes
JRu,negative,io class methods
JRu,negative,a potentially previously close io is being  reopened 
JRu,negative,this is for a range check near as i can tell
JRu,negative,rb class boot
JRu,negative,mri behavior swallow standarderorrs
JRu,negative,line 
JRu,negative,isretained true
JRu,negative,if not sync we switch to write buffered mode
JRu,negative,throw bad file descriptor is we can not read on supplied descriptor
JRu,negative,claims conversion is done via  to s  in docs
JRu,negative,return len n
JRu,negative,everything written
JRu,negative,yyrindex 
JRu,negative,of course this is not particularly useful
JRu,negative,todo read into buffer using all the fread logic int read openfile getmainstream fread buffer
JRu,negative,cleanup raising errors if any
JRu,negative, 
JRu,negative,bytelist buffer null
JRu,negative,length to read
JRu,negative,do nothing fd cloexec has no meaning in jvm since we cannot really exec
JRu,negative,i believe ruby bails out with a bug if closing fails
JRu,negative,select until read is ready
JRu,negative,no receiver for singleton class
JRu,negative, 
JRu,negative,string buffer to read it into
JRu,negative,cryptic for the uninitiated
JRu,negative,rb writable
JRu,negative,buffer str getbytelist
JRu,negative,read check from mri io c
JRu,negative,all errors to sysread should be systemcallerrors but on a closed stream ruby returns an ioerror java throws same exception for all errors so we resort to this hack
JRu,negative,read check from mri io c
JRu,negative,we  re cloning ourselves so we know the result should be a rubyobject
JRu,negative,class methods for io
JRu,negative,make all sockets blocking as configured again close unregisters all channels so we can safely reset blocking modes
JRu,negative,not using remove object here to avoid the equals call
JRu,negative,save blocking state
JRu,negative,call chmod after we created the randomaccesfile because otherwise the file could be read only
JRu,negative,fixme process options
JRu,negative,write
JRu,negative,nio based pipe
JRu,negative,enebo annotation processing forced me to do pangea method here
JRu,negative,line 
JRu,negative, tags addr eos
JRu,negative,objectclass defineannotatedmethods basicobjectmethods class
JRu,negative,may need to handle enc coderange broken
JRu,negative,zeroed by jvm
JRu,negative,the class of this object
JRu,negative,todo rb usascii str new 
JRu,negative,jruby callers should not call settaint on immediate objects
JRu,negative,internal variable methods
JRu,negative,we can safely reference methods here instead of doing getmethods since if we are adding we are not using a includedmodulewrapper
JRu,negative,common variable methods
JRu,negative,include its parent and in turn that module is parents
JRu,negative,note includes part of fix for jruby 
JRu,negative,define access methods
JRu,negative,static constants
JRu,negative,for binding purposes on the newly created struct types
JRu,negative,for interface impls
JRu,negative,these call assume threadcontext receiver getruntime getcurrentcontext
JRu,negative,obj infect
JRu,negative,superclass may be null
JRu,negative,param nv number of times to cycle or to cycle indefinitely
JRu,negative,we need full traces use default slow populator
JRu,negative,atomic ?
JRu,negative,atomic ?
JRu,negative,skip any commandline args if usr bin env is in play
JRu,negative,containing class the parent of object is null object should always be last in chain
JRu,negative,mri checks all types first
JRu,negative,make sure the module we include does not already exist
JRu,negative,classproviders return java class module in defineorgetclassunder and defineorgetmoduleunder when class module is opened using colon syntax
JRu,negative,line 
JRu,negative,update superclass reference
JRu,negative,constant ruby methods
JRu,negative,execute iteratemethod again
JRu,negative,a normal block passed to define method changes to do arity checking make it a lambda
JRu,negative,we grab serial number first the worst that will happen is we cache a later update with an earlier serial number which would just flush anyway
JRu,negative,module singleton methods are all defined public
JRu,negative,just using required is broken but no more broken than before zsuper refactoring
JRu,negative,update all hierarchies into which this module has been included
JRu,negative,this method is intended only for defining new modules in ruby code
JRu,negative,need to skip includedmodulewrappers
JRu,negative,reopen a java module
JRu,negative,fixme warning
JRu,negative,reopen a java class
JRu,negative,for zsupers in define method blech we tell the proc scope to act as the argument scope
JRu,negative,fixme warning
JRu,negative,class and module bodies default to public so make the block is visibility public jruby 
JRu,negative,ignore error
JRu,negative,if the insertion point is a class update subclass lists
JRu,negative,eh ?
JRu,negative,build a list of all modules to consider for inclusion
JRu,negative,scan class hierarchy for module
JRu,negative,mri error message says class even though module is ok
JRu,negative,module class methods
JRu,negative,next in hierarchy is an included version of the module we  re attempting so we skip including it
JRu,negative,if we have not encountered a real superclass use the found module as the new inclusion point
JRu,negative,line 
JRu,negative,tmpposition is required because getposition is side effects if the warning is generated the getposition on line this line will create a wrong position if the inclusive flag is not set
JRu,negative,java and mri definitions of remainder are the same
JRu,negative,class variable api methods
JRu,negative,ca not set tc classloader
JRu,negative,returns the stored value without processing undefs autoloads
JRu,negative,line 
JRu,negative,mri has extra pointer which makes our code look a little bit more strange in comparison
JRu,negative,value
JRu,negative,tempory buffer to build up a potential token consumer takes responsibility to reset this before use
JRu,negative,jruby java bigdecimal does not allow a negative scale so we have to simulate it
JRu,negative,line 
JRu,negative,removes and returns the stored value without processing undefs autoloads
JRu,negative,fix for jruby search hierarchy for constant
JRu,negative,what is v in c ? case   v  c  v  break
JRu,negative,w symbol
JRu,negative,line 
JRu,negative,consider thread aspects of this
JRu,negative,line 
JRu,negative,an interrupt or timeout may have caused us to miss a notify that we consumed so do another notify in case someone else is available to pick it up
JRu,negative,we always open this rw since we can only open it r or rw
JRu,negative,if we could not find the constant from cref then try getting from inheritence hierarchy
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,we got a valid errno value
JRu,negative,one optional and no required args
JRu,negative,line 
JRu,negative,print out as a nice ruby backtrace
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,try to get errno value out of the class
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yyrindex 
JRu,negative,line 
JRu,negative,actions end
JRu,negative,internal module variable api methods
JRu,negative,no script to run return success below
JRu,negative,java and mri definitions of modulo are different
JRu,negative,line 
JRu,negative,line 
JRu,negative,todo why this setresult
JRu,negative,jrubyclient
JRu,negative,skip usr bin env if it is first
JRu,negative,force for args
JRu,negative,line 
JRu,negative,skip any assignments if usr bin env is in play
JRu,negative,line 
JRu,negative,line 
JRu,negative,ignore no debugger present
JRu,negative,ignore no debugger present
JRu,negative,line 
JRu,negative,fixme temporarily disabling because this fires way too much running rails tests jruby 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative, 
JRu,negative,increase value to hit lower range
JRu,negative,line 
JRu,negative,x mantissa exponent where mantissa is in the range of 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,uncomment the puts lines if you want to see more detail
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative, 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,rounding neccessary
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,line 
JRu,negative,could not get canonical path just use given path
JRu,negative,line 
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,line 
JRu,negative,line 
JRu,negative,if it is a file channel then we can pre allocate the output buffer to the total size of buffered remaining bytes in file
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,a  next  is like a local return from the block ending this call or yield
JRu,negative,a  next  is like a local return from the block ending this call or yield
JRu,negative,line 
JRu,negative,happens with native exceptions should not filter those out
JRu,negative,line 
JRu,negative,iteration variables for the square root x and the reciprocal v initial x x sqrt initial v v x
JRu,negative,a  next  is like a local return from the block ending this call or yield
JRu,negative,a  next  is like a local return from the block ending this call or yield
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,cannot discern the total read length allocate at least enough for the buffered data
JRu,negative,line 
JRu,negative,populate up to shorter of calling arguments or local parameters in the block
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,ignore no debugger present
JRu,negative,allow it to bubble up
JRu,negative,tc under method self under method name args
JRu,negative,utf lead byte
JRu,negative,trim extension to try other options
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,integer division
JRu,negative,line 
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,peel onion make subpatterns out of outer layer of glob and recall with each subpattern example foo a c b bar fooa c bar foobbar
JRu,negative,end suffix iteration
JRu,negative,check for a builtin first
JRu,negative,line 
JRu,negative,end suffix iteration
JRu,negative,this method handles patterns and delegates to fnmatch helper for the main work
JRu,negative,line 
JRu,negative,processes seem to have some peculiar locking sequences so we need to ensure nobody is trying to close destroy while we are
JRu,negative,double precision native double precision native
JRu,negative,line 
JRu,negative,calculate based on a b c and d
JRu,negative, bit number native as bignum
JRu,negative,next indicates to decode using native encoding format
JRu,negative,line 
JRu,negative,yylen 
JRu,negative,an empirically derived rule precision applies to significand length irrespective of exponent
JRu,negative,snip off ruby or jruby command from list of arguments leave alone if the command is the name of a script
JRu,negative,this test may be too lax but it is the same as in mri
JRu,negative,first digit is always printed
JRu,negative,line 
JRu,negative,line 
JRu,negative,utf lead byte
JRu,negative,now some data
JRu,negative,line 
JRu,negative,an official rule clarified if the exponent clarif after adjusting for exponent form clarif is or the exponent clarif after adjusting for exponent form clarif is greater than the precision use exponent form
JRu,negative,in this mode is always printed
JRu,negative,line 
JRu,negative,line 
JRu,negative,utf lead byte
JRu,negative,line 
JRu,negative,now some data
JRu,negative,mri behavior validate only the unnumbered arguments
JRu,negative,switch
JRu,negative,else catch oversize below
JRu,negative,calculation for simple and typical case adapted from sun misc floatingdecimal
JRu,negative,value equality result eval key arr arr key  one  arr store  two  puts arr key assertequals two result
JRu,negative,copy what is in the buffer if there is some buffered data
JRu,negative,line 
JRu,negative,already have some bytes buffered just return those
JRu,negative,note that we ca not say the following because of the on the fly conversion of fixnum to long asserttrue value valueviavaluesiterator
JRu,negative,reset buffer
JRu,negative,is there something built into jruby to do this ?
JRu,negative,todo ruby logic is somewhat more complicated here see comments after
JRu,negative,change the thread context to include the class
JRu,negative,do median of if the array is over elements
JRu,negative,line 
JRu,negative,use array as is it is a literal array
JRu,negative,explode array it is an internal args array
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,odd
JRu,negative,line 
JRu,negative,ignore no debugger present
JRu,negative,consume the file name
JRu,negative,we need to guarantee that any existing reads of old map can proceed so we cannot yet null out each bin
JRu,negative,where shifts the scale
JRu,negative,root x is ready
JRu,negative,the loop of square root by coupled newton iteration
JRu,negative, need half a scale more
JRu,negative,mri behavior and are two different things
JRu,negative,default classcache using jitmax as a soft upper bound
JRu,negative,we require the home directory to be absolute
JRu,negative,rubybigdecimal
JRu,negative, mri allows underscores anywhere
JRu,negative,this property is a boolean to allow three values so it can match mri is nil false and true
JRu,negative,line 
JRu,negative,line 
JRu,negative,try loading from classloader resources
JRu,negative,verify it if it is there
JRu,negative, 
JRu,negative,try the normal property first
JRu,negative,write volatile
JRu,negative,try cwd first
JRu,negative,line 
JRu,negative,specify something that ca not separate
JRu,negative,symbol string must be interned
JRu,negative,must be power of 
JRu,negative,line 
JRu,negative,clone all remaining nodes
JRu,negative,single node on list
JRu,negative,actions end
JRu,negative,jrubyserver
JRu,negative,has read write been closed or is it still open for business
JRu,negative,str is frozen
JRu,negative,this is a non standard method have we decided to start extending ruby ? classclass definefastmethod subclasses callbackfactory getfastoptmethod subclasses
JRu,negative,undo check
JRu,negative,static initializing method
JRu,negative,line 
JRu,negative,use parent is marshal
JRu,negative,this is the only case it might be null here in metaclass construction
JRu,negative,fields to hold ruby and rubyclass references
JRu,negative,update all subclasses
JRu,negative,do nothing leave empty
JRu,negative,rest in ivar count followed by name value pairs
JRu,negative,write out ivar count followed by name value pairs
JRu,negative,piece of mri rb to id
JRu,negative,element set
JRu,negative,visit a label to start scoping for local vars in this method
JRu,negative,ensure we  re not running on gcj since it is not supported and leads to weird errors
JRu,negative,single method use normal logic
JRu,negative,c x c m x
JRu,negative,these methods below are used during compile time optimizations
JRu,negative,no unixsockets on windows
JRu,negative,line 
JRu,negative,mbclen invalid p
JRu,negative,no annotated methods found skip
JRu,negative,p hiragana
JRu,negative,line 
JRu,negative,rb enc reg raise
JRu,negative,rb reg raise
JRu,negative,minus one more for irubyobject
JRu,negative,rb reg expr str
JRu,negative,jruby delay setting backref until the matchdata is completely initialized
JRu,negative,write out a static initializer for frame names so it only fires once
JRu,negative,read volatile
JRu,negative,rubymodule singletonclass module getsingletonclass
JRu,negative,fallback on non pregenerated logic
JRu,negative,todo varargs ?
JRu,negative,array created for rescue args does not need to be in objectspace
JRu,negative,colon 
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,line 
JRu,negative,while
JRu,negative,wrong parameter ?
JRu,negative,we ca not rename a file while it is open in windows
JRu,negative,produce a nicer error since rubyists are not used to seeing this
JRu,negative,this should never happen past parse but just bulletproof this just in case
JRu,negative,never visited should be ok
JRu,negative,for  b foo   args are only significant in maintaining backwards compatible ast structure
JRu,negative,we can callsite cache const missing if we want
JRu,negative,assert thenbody null thenbody is not null assert elsebody null elsebody is not null
JRu,negative,store to temp so it does null out on us mid stream
JRu,negative,the name of the variable
JRu,negative,a scoped location of this variable high bits is how many scopes down and low bits is what index in the right scope to set the value
JRu,negative,line 
JRu,negative,we do not want to capture cached methods
JRu,negative,we could probably also detect if lhs value came out of cache and avoid some of this
JRu,negative,one optional one required args
JRu,negative,no takers bubble up
JRu,negative,store to temp so it does null out on us mid stream
JRu,negative,in order to make pragma is noops we set location to a special value
JRu,negative,we can callsite cache const missing if we want
JRu,negative,store to temp so it does null out on us mid stream
JRu,negative,admittedly inefficient
JRu,negative,no takers bubble up
JRu,negative,jruby while case
JRu,negative,index of variable for this arg
JRu,negative,do not attempt to coerce to array just wrap and return
JRu,negative,only a marker interface
JRu,negative,the method does not need a scope or static scope frame only
JRu,negative,proc new needs the caller is block to instantiate a proc
JRu,negative,check for proc new an especially magic method
JRu,negative,pragmas
JRu,negative,otherwise it is a literal array
JRu,negative,long slow way causes disabling for defined
JRu,negative,we set scope aware to true to force heap based locals
JRu,negative,unwrap newline nodes to get their actual type
JRu,negative,set up a local iruby variable
JRu,negative,splatted when ca not do it yet
JRu,negative,one arg but it is an array treat it as a proper array
JRu,negative,otherwise use normal args compiler
JRu,negative,
JRu,negative,colon assign in object
JRu,negative,irubyobject rubyclass visibility irubyobject rubyclass irubyobject
JRu,negative,these are all simple cases that do not require the heavier defined logic
JRu,negative,rubyclass
JRu,negative,
JRu,negative,context swapvalues context consumecurrentvalue
JRu,negative,rubyclass rubyclass rubyclass rubyclass
JRu,negative,inspect body and args
JRu,negative,no args do not pass args processor
JRu,negative,invoke run with threadcontext and topself
JRu,negative,value
JRu,negative,class variable ruby methods
JRu,negative,string string string string string rubyclass string rubyclass rubyclass string rubyclass
JRu,negative,string string string string string rubyclass string rubyclass rubyclass string rubyclass
JRu,negative,not an expression only compile the elements
JRu,negative,create the closure class and instantiate it
JRu,negative,math depends on all numeric types
JRu,negative,not an expression only compile the elements
JRu,negative,create the closure class and instantiate it
JRu,negative,normal
JRu,negative,optimizations if we know ahead of time it will always be true or false
JRu,negative,no args do not pass args processor
JRu,negative,eval new value call operator on old value and assign
JRu,negative,normal items at the front or back of the masgn
JRu,negative,create the closure class and instantiate it
JRu,negative,sizes must match
JRu,negative,head must have no non trivial assigns array groupings basically
JRu,negative,normal items at the head of the masgn
JRu,negative,compile first node as non expr and compile second node
JRu,negative,all these types are immediately considered defined
JRu,negative,put under object array already present
JRu,negative,if arity just compile the one element to save us the array cost
JRu,negative,recv
JRu,negative,it is a multiple statement body iterate over all elements in turn and chain if it get too long
JRu,negative,single statement body just compile it
JRu,negative,try optz version
JRu,negative,value
JRu,negative,need the array use unoptz version
JRu,negative,no args do not pass args processor
JRu,negative,perform assignment for the next node
JRu,negative,successfully got back a jitted method
JRu,negative,if we have not already decided on a do nothing call
JRu,negative,expect value to be an array of nodes
JRu,negative,time the compilation
JRu,negative,receiver first so we know which call site to use
JRu,negative,visit a label to start scoping for local vars in this method
JRu,negative,method is done declare all variables
JRu,negative,value is already on stack save it for later
JRu,negative,load block from version of method
JRu,negative,in method body with no containing loop issue jump error load runtime and value issue jump error
JRu,negative,arg 
JRu,negative,thread context receiver and original args
JRu,negative,if rest args excluding post args
JRu,negative,get call site and thread context
JRu,negative,invoke
JRu,negative,pop extra attr value
JRu,negative,no point in updating number if last number was same value
JRu,negative,check if it is true ending if not
JRu,negative,call site
JRu,negative,adapter tc
JRu,negative,self
JRu,negative,depending on size of original args call appropriate utility method
JRu,negative,self
JRu,negative,receiver args result value
JRu,negative,with args with block
JRu,negative,no args with block
JRu,negative,adapter tc
JRu,negative,no args no block
JRu,negative,block
JRu,negative,with args no block
JRu,negative,self
JRu,negative,arg
JRu,negative,pop extra attr value
JRu,negative,arg
JRu,negative,with args no block
JRu,negative,build descriptor string
JRu,negative,generate call sites initialization code
JRu,negative,generate regexps initialization code
JRu,negative,generate block bodies initialization code
JRu,negative,generate method cache initialization code
JRu,negative,check the condition
JRu,negative,brute force construction inline
JRu,negative,call istrue on the result
JRu,negative,ne nonzero i e true
JRu,negative,clear body or next result after each successful loop
JRu,negative,eq i e false
JRu,negative,check the condition
JRu,negative,and remaining jump exceptions should restore
JRu,negative,restore the original exception
JRu,negative,expected
JRu,negative,push true
JRu,negative,static scope
JRu,negative,extract item from array
JRu,negative,just confirm args length required
JRu,negative,superclazz null
JRu,negative,next iterate over all optional args until no more arguments
JRu,negative,script object
JRu,negative,unwrap scopes to appropriate depth
JRu,negative,store the local vars in a local variable
JRu,negative,chain to the next segment of this giant method
JRu,negative,normal return for method body return jump for within a begin rescue ensure
JRu,negative,class bodies prepare their own dynamic scope so let it do that
JRu,negative,chain to the next segment of this giant method
JRu,negative,block
JRu,negative,fix filenamecompletor to work mid line
JRu,negative,normal closure
JRu,negative,we only need full on redo exception handling if there is logic that might produce it
JRu,negative,jump back to the top of the main body of this closure
JRu,negative,struct bodies should be public by default so set block visibility to public jruby 
JRu,negative,if we are storing a name as well index is one too high for values
JRu,negative,map keep track of the next available variable index for a particular prefix
JRu,negative,no read requested hook up read to parents output
JRu,negative,lexicalnestinglevel lexicalparent null ? ir scopeimpl lexicalparent lexicalnestinglevel 
JRu,negative,insert nesting level to ensure variable names do not conflict across nested scopes i e definition of v in a closure should not override the use of v from the parent scope return new variable prefix lexicalnestinglevel idx
JRu,negative,inline script
JRu,negative,yylhs 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yygindex 
JRu,negative,struct methods
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,instance variable api methods
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,now emit bodies
JRu,negative,line 
JRu,negative,this method is called to build arguments for a block
JRu,negative,methods of the object class rb obj
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,ca not use v and stdin
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,note if is  happens to the a class this is effectively an assignment of a class instance variable
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,lists to aggregate variables and bodies for whens
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,mirko check
JRu,negative,zero length array
JRu,negative,yylhs 
JRu,negative,yylhs 
JRu,negative,yydefred 
JRu,negative,reg
JRu,negative,yylen 
JRu,negative,yyrindex 
JRu,negative,line 
JRu,negative,the case instruction
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,get the incoming case value
JRu,negative,build first node only and return false
JRu,negative,line 
JRu,negative,line 
JRu,negative,call istrue on the result
JRu,negative,line 
JRu,negative,field separator
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,do we have a dynamic container ?
JRu,negative,line 
JRu,negative,add array construction methods
JRu,negative,record the loop we are beginning to process
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,if true returns the rest of the array starting at the index
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative, load the module first lhs of node then load the constant from the module
JRu,negative,line 
JRu,negative,line 
JRu,negative,instance method
JRu,negative,line 
JRu,negative,build ir for body
JRu,negative,line 
JRu,negative,multiple conditions for when
JRu,negative,done done done done
JRu,negative,build else if it exists
JRu,negative,jump to  l  if this arg is not null if null fall through and build the default value
JRu,negative,line 
JRu,negative,value of the last expression in the block
JRu,negative,now for the rest
JRu,negative,both for fixed arity and variable arity methods
JRu,negative,private interface
JRu,negative,rest of the argument array
JRu,negative,assign the closure to the block variable in the parent scope and return it
JRu,negative,line 
JRu,negative,while processing loops this returns the loop that we are processing
JRu,negative,build closure body and return the result of the closure
JRu,negative,line 
JRu,negative,build args
JRu,negative,create a new closure context
JRu,negative,get the container for this new module
JRu,negative,build args
JRu,negative,create a new closure context
JRu,negative,by default the container for this class is is 
JRu,negative,assign the closure to the block variable in the parent scope and return it
JRu,negative,line 
JRu,negative,line 
JRu,negative,build the module body
JRu,negative,if more than locals get the locals array too
JRu,negative,if a closure the next is simply a return from the closure if a regular loop the next is simply a jump to the end of the iteration
JRu,negative,set attr
JRu,negative,call operator
JRu,negative,get attr
JRu,negative,we wo not enter the loop just build the condition node
JRu,negative,build first node as non expr and build second node
JRu,negative,do nothing fall back on default compiler below
JRu,negative,this does the assignment
JRu,negative,use irubyobject
JRu,negative,if v is defined and true we are done
JRu,negative,build the cfg for this scope supported only by methods closures
JRu,negative,args
JRu,negative,for closures a redo is a jump to the beginning of the closure for non closures a redo is a jump to the beginning of the loop
JRu,negative,what handles warnings
JRu,negative,top level script
JRu,negative,build a dummy static method for the class the scope in which all definitions and class code executes equivalent to java clinit
JRu,negative,the root method of a class the scope in which all definitions and class code executes equivalent to java clinit
JRu,negative,line 
JRu,negative,dummy top level method for the class
JRu,negative,define the operations below
JRu,negative,def instructions
JRu,negative,create a new temporary variable
JRu,negative,eval instructions
JRu,negative,value copy and type conversion operations
JRu,negative,line 
JRu,negative,closure instructions
JRu,negative,alu operations
JRu,negative,loads
JRu,negative,exception instructions
JRu,negative,optimization guards
JRu,negative,a case when branch
JRu,negative,stores
JRu,negative,jump and branch operations
JRu,negative,arg
JRu,negative,others
JRu,negative,returns the containing parent scope can be a dynamic value hence operand
JRu,negative,scripts
JRu,negative,scripts and modules
JRu,negative,line 
JRu,negative,run the pass on the passed in scope
JRu,negative,by default return instructions cannot be deleted
JRu,negative,default implementation methods below
JRu,negative,run the passed in compiler pass on this scope
JRu,negative,indicate that we are done processing the loop
JRu,negative,abstract methods without a default implementation
JRu,negative,check if we can optimize this call based on the receiving method and receiver type use the simplified receiver
JRu,negative,optimize some core class method calls for constant values
JRu,negative,if the cfg of the method is around print the cfg
JRu,negative,public fields and methods below
JRu,negative,if we got a simplified value mark the call dead and insert a copy in its place
JRu,negative,readline
JRu,negative,dataflow problem with which this node is associated cfg node for which this node contains info
JRu,negative,if the call has been optimized away in the previous step it is no longer a hard boundary for opts
JRu,negative,protected fields methods below
JRu,negative,public abstract methods
JRu,negative,line 
JRu,negative,in is the same
JRu,negative,compute meet over all paths solution for this dataflow problem on the input cfg this implements a standard worklist algorithm
JRu,negative,in changed
JRu,negative,adapter tc
JRu,negative,public methods with a default implementation
JRu,negative,individual analyses should override this
JRu,negative,line 
JRu,negative,call site
JRu,negative,line 
JRu,negative,line 
JRu,negative,we want unique ids for dataflow variables
JRu,negative,individual analyses should override this
JRu,negative,v is defined it is no longer live before  i 
JRu,negative,private fields and methods below
JRu,negative,protected fields and methods below
JRu,negative,unique id assigned to this variable
JRu,negative,invoke
JRu,negative,line 
JRu,negative,switch to an allocator based on a default constructor
JRu,negative,start out with a default rubyobject allocator
JRu,negative,traverse the instructions in this basic block in reverse order
JRu,negative,out union in succs
JRu,negative,class or module
JRu,negative,public interface
JRu,negative,protected package fields methods
JRu,negative,abstract please override methods
JRu,negative,if  v  is not live at the instruction site and it has no side effects mark it dead
JRu,negative,do not mark this instruction is operands live if the instruction itself is dead
JRu,negative,self
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,private fields methods
JRu,negative,used during optimization passes to propagate type and other information
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yydefred 
JRu,negative,arg 
JRu,negative,line 
JRu,negative,line 
JRu,negative,list of all variables used by all operands of this instruction
JRu,negative,self
JRu,negative,line 
JRu,negative,array of all operands for this instruction
JRu,negative,line 
JRu,negative,line 
JRu,negative,by default no simplifications
JRu,negative,line 
JRu,negative,can this call lead to ruby code getting modified ? if we do not know what method we are calling we assume it can pessimistic but safe if we do know the target method we ask the method itself whether it modifies ruby code
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,if divisor is zero do not simplify
JRu,negative,load handle
JRu,negative,nothing to do by default
JRu,negative,netprotocolbufferedio
JRu,negative,you can only value replace atomic values
JRu,negative,map of label basic blocks with that label
JRu,negative,if divisor is zero do not simplify
JRu,negative,if divisor is zero do not simplify
JRu,negative,neither
JRu,negative,the operand that this attribute targets deferred attributevalue val attribute value
JRu,negative,get the target class of this operand if we know it
JRu,negative,arrays ranges etc are compound values variables fixnums floats etc are atomic values
JRu,negative,for simplification get the target value even if compound
JRu,negative,rubysocket
JRu,negative,yydefred 
JRu,negative,line 
JRu,negative,for simplification get the target value even if compound
JRu,negative,yysindex 
JRu,negative,line 
JRu,negative,map of label basic blocks which are waiting for a bb with that label
JRu,negative,object args
JRu,negative,yylen 
JRu,negative,line 
JRu,negative,yylen 
JRu,negative,yylhs 
JRu,negative,init before building basic blocks below
JRu,negative,foo
JRu,negative,currbb cannot be null
JRu,negative,add forward ref edges
JRu,negative,case case 
JRu,negative,jump instruction bbs dont add an edge to the succeeding bb by default
JRu,negative,load arguments
JRu,negative,root level logic
JRu,negative,load receiver
JRu,negative,noex private for toplevel
JRu,negative,root level classes
JRu,negative,line 
JRu,negative,receiver
JRu,negative,invoke specific arity version
JRu,negative,at end
JRu,negative,args array
JRu,negative,no candidates ? fail
JRu,negative,object arg 
JRu,negative,no silly ticks
JRu,negative,useful for code completion inside the irb
JRu,negative,line 
JRu,negative,if the task was scheduled wait for it to finish before polling for the exception it would have thrown
JRu,negative,explicit reference to these vars as symbols
JRu,negative,line 
JRu,negative,undo check
JRu,negative,no check for    
JRu,negative,t n  `
JRu,negative,constants webrick crashes without
JRu,negative,block
JRu,negative,something like cvar cbase from eval c factored out for the benefit of all the classvar related node evaluations
JRu,negative,ignore
JRu,negative,line 
JRu,negative,restore position
JRu,negative,this is ensured by the callers
JRu,negative,line 
JRu,negative,binding provided for scope use it
JRu,negative,line 
JRu,negative,no binding just eval in current frame caller is frame
JRu,negative,line 
JRu,negative,line 
JRu,negative,i th argument
JRu,negative,used by the compiler to simplify arg processing
JRu,negative,line 
JRu,negative,otherwise rethrow
JRu,negative,line 
JRu,negative,line 
JRu,negative,jruby ignore escape key it causes irb to quit if we pass it out through readline
JRu,negative,no editing before startpos
JRu,negative,jruby if wrapping a nativeexception use the actual java exception is trace as our java trace
JRu,negative,mri does similar thing on macos x with  editline wrapper 
JRu,negative,fixme jruby 
JRu,negative,not overridden let is go
JRu,negative,if it is the exception we  re expecting
JRu,negative,line 
JRu,negative,no timeout in critical section
JRu,negative,complete using a proc object
JRu,negative,clear basename so it is anonymous when raising
JRu,negative,line 
JRu,negative,toplevel defines
JRu,negative,timeout module methods
JRu,negative,these are not really used by timeout but exposed for compatibility
JRu,negative,line 
JRu,negative,ensure room for terminating zero byte
JRu,negative,array and struct are only used internally
JRu,negative,line 
JRu,negative,line 
JRu,negative,when a length is given read string acts like get bytes
JRu,negative,last token read via yylex
JRu,negative,older jdk on linux map  c  to  libc so  which does not work
JRu,negative,this variant of newstruct is called from structlayoutbuilder
JRu,negative,the value of is for socket ai passive
JRu,negative,replace memory object with one that throws an exception on any access
JRu,negative,windows is llp 
JRu,negative,add pointer null as a constant
JRu,negative,blah
JRu,negative,more constants needed by specs
JRu,negative,line 
JRu,negative,replace memory object with one that throws an exception on any access
JRu,negative,ensure room for terminating zero byte
JRu,negative,a specific version was requested use as is for search
JRu,negative,line 
JRu,negative,get the convention from the options hash
JRu,negative,case float
JRu,negative,assemble a name offset array
JRu,negative,create the ordered list of field names from the map
JRu,negative,line 
JRu,negative,no auto cleanup needed
JRu,negative,keep a reference to avoid the memory being freed
JRu,negative,keep a reference to avoid the memory being freed
JRu,negative,line 
JRu,negative,get the convention from the options hash
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,rubyunixserver
JRu,negative,af inet
JRu,negative,line 
JRu,negative,
JRu,negative,line 
JRu,negative,rubyipsocket
JRu,negative,def self getaddrinfo host port family nil socktype nil protocol nil flags nil
JRu,negative,when socket ai passive and host is nil return  any  address
JRu,negative,line 
JRu,negative,line 
JRu,negative,set up for potentially fast int operations
JRu,negative,hook up the memorypointer class if its not already there
JRu,negative,sockaddr un has different structure on different platforms see jruby for more details
JRu,negative,line 
JRu,negative,this is a bit convoluted because socketchannel bind is only in jdk and socket getchannel seems to return null in some cases
JRu,negative,line 
JRu,negative,af inet
JRu,negative,rubyudpsocket
JRu,negative,host is nil or the empty string bind to inaddr any
JRu,negative,host and port given
JRu,negative,make sure descriptor is registered
JRu,negative,rubybasicsocket
JRu,negative,by default we always reverse lookup unless do not reverse lookup set
JRu,negative,recv returns nil on eof
JRu,negative,continue with normal initialization
JRu,negative,we do not have to define any that we do not support see socket c
JRu,negative,mandatory constants we have not implemented
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,ca not set tc classloader
JRu,negative, 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yyrindex 
JRu,negative,all threads in ruby thread group plus main thread
JRu,negative,do nothing just exit
JRu,negative,e printstacktrace
JRu,negative,first check if the sender has unreceived mail
JRu,negative,line 
JRu,negative,line 
JRu,negative,numeric host use it for port
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,no connection immediately accepted let them try again
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,otherwise one key has been selected ours so we get the channel and hand it off
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,nativethread setpriority priority
JRu,negative,restore context classloader in case we  re using a thread pool
JRu,negative,line 
JRu,negative,yyrindex 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yyrindex 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yyrindex 
JRu,negative,someone called exit so we need to kill the main thread
JRu,negative,call the thread is code
JRu,negative,line 
JRu,negative,line 
JRu,negative,set thread context jruby classloader here for ruby owned thread
JRu,negative,line 
JRu,negative,line 
JRu,negative,future is done or cancelled skip it
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,switch
JRu,negative,line 
JRu,negative,thread is not alive skip it
JRu,negative,shift to yyn
JRu,negative,line 
JRu,negative,line 
JRu,negative,unwrap newline nodes to get their actual type
JRu,negative,unwrap newline nodes to get their actual type
JRu,negative,get runtime create jump error and throw it
JRu,negative,we need to close the out since some processes would just wait for the stream to be closed before they process its content and produce the output e g cat
JRu,negative,just confirm minimum args provided
JRu,negative,probably a primitive
JRu,negative,be dead
JRu,negative,two args no block load null block
JRu,negative,invoke pre method stuff
JRu,negative,clear the redo
JRu,negative,return jump handling
JRu,negative,redo jump handling
JRu,negative,return result if we  re still good
JRu,negative,actual required is less than so we use specific arity
JRu,negative,throw redo error if we  re still good
JRu,negative,finally
JRu,negative,no required specified check actual number of required args
JRu,negative,finally handling for abnormal exit
JRu,negative,call post method stuff exception raised
JRu,negative,in debug mode we append dbg to class name to force it to regenerate or use pre generated debug version
JRu,negative,simple path no multimethod
JRu,negative,for zero one two three arities javamethod javamethod call irubyobject args will check
JRu,negative,normal all rest method
JRu,negative,dumpinginvocationmethodfactory
JRu,negative,just confirm args length required
JRu,negative,self name
JRu,negative,tc
JRu,negative,raise an error if arity does not match requirements
JRu,negative,variable args with block
JRu,negative,two args with block
JRu,negative,close it out
JRu,negative,one arg no block load null block
JRu,negative,zero args no block load null block
JRu,negative,one arg with block
JRu,negative,load block if it accepts block
JRu,negative,three args with block
JRu,negative,all other arg cases without block
JRu,negative,all other arg cases with block
JRu,negative,call post method stuff exception raised
JRu,negative,three args no block do nothing
JRu,negative,two args no block do nothing
JRu,negative,one arg no block do nothing
JRu,negative,static invocation
JRu,negative,void return type so we need to load a nil for returning below
JRu,negative,load receiver as original type for virtual invocation
JRu,negative,normal finally and exit
JRu,negative,virtual invocation
JRu,negative,promise to implement one to n
JRu,negative,promise to implement three with block
JRu,negative,method itself threadcontext invoked name
JRu,negative,singleton classes do not get their own visibility domain
JRu,negative,this method is called to build assignments for a multiple assignment instruction
JRu,negative,method itself threadcontext invoked name
JRu,negative,line 
JRu,negative,never reached
JRu,negative,and remaining jump exceptions should restore
JRu,negative,simpleinvocationmethod
JRu,negative,for visibility we need real meta class and not anonymous one from class self
JRu,negative,yyrindex 
JRu,negative,no args
JRu,negative, 
JRu,negative,c c c c string c null c
JRu,negative,promise to implement n with block
JRu,negative,promise to implement zero to n with block
JRu,negative,promise to implement two to three with block
JRu,negative,promise to implement zero to three with block
JRu,negative,variable is never read variable is never live
JRu,negative,promise to implement one to n with block
JRu,negative,inline script
JRu,negative,build the class body
JRu,negative,method ifnonnull truelabel
JRu,negative,promise to implement one to three with block
JRu,negative,interfaces are handled as modules
JRu,negative,construct the class implementing all supertypes
JRu,negative,load arguments into irubyobject for dispatch
JRu,negative,normally we could leave these to fall back on the superclass but since it dispatches through the version below which may dispatch through the block version we can save it a couple hops by overriding these here
JRu,negative,c
JRu,negative,get self
JRu,negative,confirm maximum not greater than optional
JRu,negative,wrap self and store the wrapper
JRu,negative,promise to implement two to three
JRu,negative,list of modules classes and methods defined in this scope
JRu,negative,promise to implement two to n
JRu,negative,create constructor
JRu,negative,returns the containing parent scope
JRu,negative,promise to implement one to three
JRu,negative,fields needed for dispatch and such
JRu,negative,all other arities use n dispatch path
JRu,negative,load up object and add a few useful methods
JRu,negative,load self class and name
JRu,negative,end constructor
JRu,negative,all methods dispatch to the simple version by default which is method missing normally
JRu,negative,set ruby
JRu,negative,yygindex 
JRu,negative,get current context
JRu,negative,set rubyclass
JRu,negative,try specific name first falling back on simple name
JRu,negative,the proxy wrapper type hierarchy
JRu,negative,try lookup again under lock
JRu,negative,for each simple method name implement the complex methods calling the simple version
JRu,negative,fields needed for dispatch and such
JRu,negative,promise to implement three to n
JRu,negative,construct the class implementing all supertypes
JRu,negative,handle redos by restarting the block
JRu,negative,promise to implement zero to three
JRu,negative,create constructor
JRu,negative,end constructor
JRu,negative,by default the container for this class is is 
JRu,negative,map of constants defined in this scope not valid for methods
JRu,negative,scripts classes and modules
JRu,negative,proxy is complete return it
JRu,negative,store the wrapper
JRu,negative,store it
JRu,negative,now create a method added that can replace the dynamicmethod fields as they  re redefined
JRu,negative,convert to irubyobject
JRu,negative,create static init for a monitor object
JRu,negative,if we expect a return value unwrap it
JRu,negative,end setup method
JRu,negative,control flow graph for this scope
JRu,negative,end class
JRu,negative,yygindex 
JRu,negative,prepare temp locals
JRu,negative,field is null lock class and try to populate
JRu,negative,finally block to release monitor
JRu,negative,line 
JRu,negative,end of try block
JRu,negative,try finally block to ensure unlock
JRu,negative,line 
JRu,negative,method still not available call method missing
JRu,negative,convert to irubyobject
JRu,negative,setup the class
JRu,negative,exception handling for monitor release
JRu,negative,load self class and name
JRu,negative,re get re check method if not null now go to dispatch
JRu,negative,create the class
JRu,negative,if we expect a return value unwrap it
JRu,negative,invoke method
JRu,negative,end class
JRu,negative,end setup method
JRu,negative,return
JRu,negative,up two slots for long is two halves
JRu,negative,load arguments into irubyobject for dispatch
JRu,negative,write volatile
JRu,negative,up two slots for long is two halves
JRu,negative,load arguments
JRu,negative,set the full name
JRu,negative,construct the new interface impl and set it into the object
JRu,negative,setup constants for public inner classes
JRu,negative,line 
JRu,negative, 
JRu,negative,signalfacade
JRu,negative,line 
JRu,negative,include all interfaces
JRu,negative,add all public constructors note getconstructors only returns public ones
JRu,negative,add all instance and static methods
JRu,negative,ruby name
JRu,negative,too much array creation
JRu,negative,note the five match methods are arity split to avoid the cost of boxing arguments when there is already a cached match do not condense them into a single method
JRu,negative,only include static methods if specified
JRu,negative,only public static fields that are valid constants
JRu,negative,add a few type specific special methods
JRu,negative,add all static variables
JRu,negative,initialize cache of parameter types to method
JRu,negative,long first because it is what fixnum claims to be
JRu,negative,if we hold a java object we need a java class accessor
JRu,negative,yylhs 
JRu,negative,read volatile
JRu,negative,todo varargs ?
JRu,negative,double first because it is what float claims to be
JRu,negative,end of scoping for closure is vars
JRu,negative,dummy bodies for default impls
JRu,negative,walk all superclasses aggregating interfaces
JRu,negative,method is done declare all variables
JRu,negative,too much array creation
JRu,negative,initialize cache of parameter types to method
JRu,negative,read volatile
JRu,negative,look through all mappings to find a match entry for this field
JRu,negative,hit a non java proxy class included modules can be a cause of this skip
JRu,negative,we could not find all of them print out first one we could print them all ?
JRu,negative,next we define a few private methods that we will use to manipulate the java object contained within this ruby object
JRu,negative,initialize this if it has not been
JRu,negative,invoke static file
JRu,negative,initialize these if they have not been
JRu,negative,construct the mirror class and parent classes
JRu,negative,setup new etc unless this is a concretejavaproxy subclass
JRu,negative,not allowed for original non generated java classes note not allowing for any previously created class right now this restriction might be loosened later for generated classes
JRu,negative,exact arg list file
JRu,negative,list of interfaces we implement
JRu,negative,we capture the original new and make it private
JRu,negative,declare the field
JRu,negative,declare the field
JRu,negative,construct new array proxy arrayjavaproxy
JRu,negative,boxed arg list file
JRu,negative,get map of all fields we want to define
JRu,negative,we  ve already done the above priming logic just add another interface to the list of intentions unless we  re past the point of no return or already intend to implement the given interface
JRu,negative,jcreate instantiates the proxy object which implements all interfaces and which is wrapped and implemented by this object
JRu,negative,implement all forces implementation of all interfaces we intend for this class to implement
JRu,negative,now we add an implement and implement all methods to the class
JRu,negative,not allowed for existing java interface modules
JRu,negative,weakly reserved names
JRu,negative,array creation should use this variant
JRu,negative,setup constants for public inner classes
JRu,negative,jruby make file dynamically determined at load time but we provide a reasonable default here
JRu,negative,parent setconstant name proxyclass where the name should come from ?
JRu,negative,block
JRu,negative,keep this variant for kind of ? testing
JRu,negative,already set up append features just add the interface if we have not already
JRu,negative,array of interface type creation identity
JRu,negative,? l boolean true if file exists and is a symbolic link
JRu,negative,this try catch is to allow failing over to the commands logic when running from within a jruby complete jar file which has jruby home a jar file url that does not resolve correctly with jrubyfile create
JRu,negative,need to initialize
JRu,negative,including interface module so old style interface subclasses will respond correctly to kind of ? etc
JRu,negative,add reference to interface module
JRu,negative,this point is only reached if there was an exception handler installed
JRu,negative,need to initialize
JRu,negative,yylhs 
JRu,negative,figure end char is special to indicate begin end and that no nesting ?
JRu,negative,proxy is complete return it
JRu,negative,construct static scope list of names
JRu,negative,same as argument types but matches name in java lang reflect constructor method
JRu,negative,yydefred 
JRu,negative,ignore we wo not use invokedynamic
JRu,negative,called only by initializing thread no synchronization required
JRu,negative,proxy module for interfaces
JRu,negative,called only by initializing thread no synchronization required
JRu,negative,proxy class for concrete classes also used for concrete interfaces which is why we have two fields
JRu,negative,if there is no constructor we must prevent construction
JRu,negative,something ?
JRu,negative,allow proxy to be read without synchronization if proxy is under construction only the building thread can see it
JRu,negative,modified only by addmethod no synchronization required
JRu,negative,now add all aliases for the static methods fields as appropriate
JRu,negative,line 
JRu,negative,store previous exception for restoration if we rescue something
JRu,negative,do nothing it is a non impl method
JRu,negative,line 
JRu,negative,is something ? contains thing ?
JRu,negative,yylhs 
JRu,negative,additionally add ? postfixed aliases to any boolean methods and properties
JRu,negative,add main impl used for detached or command line execution of this script with a new runtime root method of a script is always in stub method 
JRu,negative,add property name aliases
JRu,negative,getfoo foo getfoo int foo int
JRu,negative,setfoo foo foo foo
JRu,negative,no seconds just yield
JRu,negative, support for encodings
JRu,negative,many cases are ok to convert to float if not one of these error
JRu,negative,getfoobar foobar ? foo bar ?
JRu,negative,grab nil for local variables
JRu,negative,synthetic methods always have zero arg parameters
JRu,negative,break jump
JRu,negative,undefinedmethod should be immutable
JRu,negative,we force argparamcount to since we always know we will have args
JRu,negative,load all arguments straight through
JRu,negative,grab nil for local variables
JRu,negative,now iterate over all installers and make sure they also have appropriate aliases
JRu,negative,line 
JRu,negative,ignore bad constant named inner classes pending jruby 
JRu,negative,skip catch block
JRu,negative,main body
JRu,negative,we need to collect all methods though we will only install the ones that are named in this class
JRu,negative,ignore bad constant named inner classes pending jruby 
JRu,negative,double check the cache now that we  re synchronized
JRu,negative,we append an index to ensure two identical method names will not conflict
JRu,negative,ca not be converted any more return it
JRu,negative,java getproxyclass deals with sync issues so we wo not duplicate the logic here
JRu,negative,eq i e false pop the extra result and replace with the send part of the and
JRu,negative,old quasi deprecated interface class
JRu,negative,is something ? contains thing ?
JRu,negative,isfoo foo isfoo foo
JRu,negative,datagram set accordingly again af inet
JRu,negative,we all all superclasses but avoid adding superclass methods with same name signature as subclass methods see jruby 
JRu,negative,eq i e false
JRu,negative,ignore we wo not use invokedynamic
JRu,negative,restrictive security policy no matter we only want public classes anyway
JRu,negative,call istrue on the result
JRu,negative,see note above re return type
JRu,negative,very restrictive policy disallows member public we  d never actually get this far in that case
JRu,negative,ignore if it is not a global var
JRu,negative,irubyobject family args 
JRu,negative,dup it since we need to return appropriately if it is false
JRu,negative,one dimensional array
JRu,negative,if it is an array of arrays recurse with the component type
JRu,negative,n dimensional array
JRu,negative,use specific arity for as much as possible
JRu,negative,chain to the next segment of this giant method
JRu,negative,clear body or next result after each successful loop
JRu,negative,load args which will be the irubyobject representing block args
JRu,negative,if not a property but is boolean add ? postfixed aliases
JRu,negative,done with closure compilation
JRu,negative,yygindex 
JRu,negative,must be back on first line on rewind
JRu,negative,invoke file with threadcontext self args null and block null
JRu,negative,brute force construction inline
JRu,negative,for object default to natural wrapper type
JRu,negative,af inet
JRu,negative,not true eval value and assign
JRu,negative,rubymodule rubymodule string
JRu,negative,hmmmm
JRu,negative,return last value from execution
JRu,negative, 
JRu,negative,rubyobject is already of the required jruby class or subclass
JRu,negative,thread context
JRu,negative,we  ve found a java type to which we  ve coerced the ruby value wrap it
JRu,negative,it is not one of the types we convert so just pass it out as is without wrapping
JRu,negative,ca not set tc classloader
JRu,negative,create dir if necessary
JRu,negative, 
JRu,negative,we append an index to ensure two identical method names will not conflict
JRu,negative,create the class with the appropriate class name and source file
JRu,negative,line number
JRu,negative,line 
JRu,negative,for specific index cases clean up non expression values
JRu,negative,include interface modules into the proxy class
JRu,negative,java lang object is added at root of java proxy classes
JRu,negative,generate block bodies initialization code
JRu,negative,this also handles unsigned int negative signed int conversion
JRu,negative,include any interfaces we extend
JRu,negative,now attach java related extras to core classes
JRu,negative,the template for interface modules
JRu,negative,no variable initialization because we  re reusing parent is scope flat
JRu,negative,generate variable readers initialization code
JRu,negative,should not happen but if a superclass is specified it is not ours
JRu,negative,add all name to class mappings
JRu,negative,add some base java classes everyone will need
JRu,negative,yydefred 
JRu,negative,we will only map conventional class names to modules
JRu,negative,do a void return
JRu,negative,size 
JRu,negative,add alias to meta
JRu,negative,yygindex 
JRu,negative,jruby the proxy class might already exist
JRu,negative,add java method for unbound use
JRu,negative,generate bytelists initialization code
JRu,negative,upper case name so most likely a class
JRu,negative,expected
JRu,negative,generate regexps initialization code
JRu,negative,this point is only reached if there was an exception handler installed
JRu,negative,generate symbols initialization code
JRu,negative,interfacejavaproxy createinterfacejavaproxy context
JRu,negative,save package module as ivar in parent and add method to parent so we do not have to come back here
JRu,negative,this is where we will get connected when classes are opened using package module syntax
JRu,negative,if that succeeds the others should as well
JRu,negative,for seek cur need to adjust for buffered data
JRu,negative,retrieve scope from scopes array
JRu,negative,default for starting tempvariableindex is ok
JRu,negative,load receiver
JRu,negative,output record separator
JRu,negative,make getter for proxy class
JRu,negative,store the new local vars in a local variable
JRu,negative,loop until we see the nth separator char
JRu,negative,if we hit eof or reached limit then we  re done
JRu,negative,re register
JRu,negative,fill local vars with nil to avoid checking every access
JRu,negative,in mode this will be a rubyarray containing the arguments in mode this will be an irubyobject
JRu,negative,catch logic for flow control next break
JRu,negative,build descriptor string
JRu,negative,not primitive or lc class
JRu,negative,root level methods
JRu,negative,not primitive or lc class
JRu,negative,if more than locals get and populate the locals array too
JRu,negative,create list of interfaces to proxy and make sure they really are interfaces
JRu,negative,line 
JRu,negative,hashcode is a combination of the interfaces and the ruby class we  re using to implement them
JRu,negative,add name to call site list
JRu,negative,use numbered access method
JRu,negative,generate fixnums initialization code
JRu,negative,normal new class implementing interfaces
JRu,negative,ignore
JRu,negative,initialize some components
JRu,negative,for zero args case we can stop searching
JRu,negative,build scope names string
JRu,negative,line 
JRu,negative,java reflection does not allow retrieving constructors like methods
JRu,negative,for zero args case we can stop searching
JRu,negative, 
JRu,negative,module is on top of stack
JRu,negative,verify the class
JRu,negative,yydefred 
JRu,negative,store the local vars in a local variable if there are any
JRu,negative,no matching ctor found
JRu,negative,utility methods
JRu,negative,end class
JRu,negative,receiver
JRu,negative,start class
JRu,negative,initialize a simple frame
JRu,negative,this test really means that this is a ruby defined subclass of a java class
JRu,negative,no args with block
JRu,negative,no matching method found
JRu,negative,prepare a faster handle if handles are enabled and the method and class are public
JRu,negative,arg 
JRu,negative,search through all declared methods to find a closest match
JRu,negative,must be a public method
JRu,negative,must be a public class
JRu,negative,now we create a new bsfmanager
JRu,negative,first we need to register the jruby engine
JRu,negative,self
JRu,negative,expand variables indentation of final marker
JRu,negative,for our purposes accessibles are also members and vice versa so we will include member methods here
JRu,negative,jruby while case
JRu,negative,self
JRu,negative,e printstacktrace
JRu,negative,yydefred 
JRu,negative,package scope
JRu,negative,trigger class initialization for the class
JRu,negative,no args no block
JRu,negative,e printstacktrace
JRu,negative,populate values for the parameter names
JRu,negative,receiver
JRu,negative,execute a ruby script add the menubar to the frame
JRu,negative,execute ruby statements
JRu,negative,evaluates a ruby expression and display the result
JRu,negative,need names ordered for key generation later
JRu,negative,ruby level methods
JRu,negative,method is done declare all variables
JRu,negative,we only collect methods and interfaces for user defined proxy classes
JRu,negative, 
JRu,negative,finish class initializer
JRu,negative,get any included interfaces
JRu,negative,with args with block
JRu,negative,statically initialized below
JRu,negative,lock in the overridden methods for the new class and any as yet uninstantiated ancestor class
JRu,negative,load static empty array
JRu,negative,receiver
JRu,negative,we generate all constructors and let some fail during invocation later
JRu,negative,match data
JRu,negative,construct the super proxy method
JRu,negative,replace a string of newlines with a single one
JRu,negative,where we get new positions from
JRu,negative,box arguments
JRu,negative,block
JRu,negative,end of variable scope
JRu,negative,this is a simple rethrow handler
JRu,negative,the current block is already associated with proc no need to create a new one
JRu,negative,if not already a proc then we should try and make it one
JRu,negative,use the same logic as in evaluationstate
JRu,negative,opt and rest must be at least required
JRu,negative,no opt no rest exact match
JRu,negative,create static private method field
JRu,negative,only rest must be at least required
JRu,negative,opt but no rest must be at least required and no more than required opt
JRu,negative, class state self  and  class obj  uses defn as opposed to defs
JRu,negative,reuse trailing consecutive sequence at same slot
JRu,negative,find power of two sizes best matching arguments
JRu,negative,nul
JRu,negative,clone all remaining nodes
JRu,negative,read volatile
JRu,negative,must be power of must be power of 
JRu,negative,each root node has a top level scope that we need to push
JRu,negative,read volatile
JRu,negative,pop extra failed value from first cycle and we  re done
JRu,negative,protected void finalize throws throwable system err println objectproxycache id finalized at new java util date
JRu,negative,entry exists proxy has been gc ed replace entry
JRu,negative,wait for i o on any channel
JRu,negative,system err println objectproxycache id started at new java util date
JRu,negative,make getter for handler
JRu,negative,entryrefs include hash with key to facilitate lookup by segment expunge after ref is removed from referencequeue
JRu,negative,should not happen
JRu,negative,put back lastline for any elements past start of heredoc marker
JRu,negative,yylhs 
JRu,negative,indirect read write volatile
JRu,negative,adapter tc
JRu,negative,references to the java object and its proxy will either both be weak or both be soft since the proxy contains a strong reference to the object so it would not make sense for the reference types to differ
JRu,negative,must be called under lock
JRu,negative,indirect read write volatile
JRu,negative,ctor used by remove rehash
JRu,negative,must be called under lock
JRu,negative,temp method to verify tablesize value must be called under lock
JRu,negative,must be called under lock
JRu,negative,how many strings are nested in the current string term
JRu,negative,hex constant
JRu,negative,for  list  and only populated if list is not null
JRu,negative,start of string   n
JRu,negative,how many bytes into the source are we ?
JRu,negative,it is a comment
JRu,negative,number of newlines read from the reader
JRu,negative,visit a label to start scoping for local vars in this method
JRu,negative,? boolean true if file and file are identical
JRu,negative,end of string   
JRu,negative,expand variables indentation of final marker
JRu,negative,last full line read
JRu,negative,create constants for open flags
JRu,negative,get rest of line linebuffer filled as side effect
JRu,negative,argv
JRu,negative,octal constant
JRu,negative,just ignore
JRu,negative,regexp engine  java 
JRu,negative,was a goto in original ruby lexer
JRu,negative, 
JRu,negative,yydgoto 
JRu,negative,white spaces
JRu,negative,found end marker for this heredoc
JRu,negative,set p
JRu,negative,lexpop
JRu,negative,push 
JRu,negative,marker delimiting heredoc boundary
JRu,negative,stream based
JRu,negative,rb yield values equivalent
JRu,negative,remain where we are
JRu,negative,satisfy java util set interface for java integration
JRu,negative,give a name to a value enebo this should be used more
JRu,negative,end of script
JRu,negative,stream of data that yylex examines
JRu,negative,count of nested parentheses only
JRu,negative,are we lexing ruby or syntax
JRu,negative,when the heredoc identifier specifies eof that indents before ident are ok the    
JRu,negative,a scoped location of this variable high bits is how many scopes down and low bits is what index in the right scope to set the value
JRu,negative,  v 
JRu,negative, only
JRu,negative,debugging help
JRu,negative,short hand e g versus q
JRu,negative,return in a class body raises error
JRu,negative,no mb ismbchar term
JRu,negative,last match
JRu,negative,last read line string
JRu,negative,methods  foo   and  foo ?   are possible but if followed by it is relop
JRu,negative,line 
JRu,negative,eof enebo after default ?
JRu,negative,line 
JRu,negative,just a plain bang
JRu,negative,in case last next was the newline
JRu,negative,our readback pushback buffer
JRu,negative,documentation nodes
JRu,negative,already loaded files
JRu,negative,output field separator
JRu,negative,load all arguments straight through
JRu,negative,last read line number
JRu,negative,ignorecase
JRu,negative,reading filename
JRu,negative,` string before last match
JRu,negative,line 
JRu,negative,see if it is a reserved word
JRu,negative,block expr
JRu,negative,arg and receiver already present on the stack
JRu,negative,backslash
JRu,negative,return last value from execution
JRu,negative,where we get our newest char is
JRu,negative,block primary
JRu,negative,enum lex state
JRu,negative,we do not append since java number parser gets confused
JRu,negative,hash
JRu,negative,fixme peek  u  utf stuff for 
JRu,negative,  v 
JRu,negative,hexadecimal
JRu,negative,octal
JRu,negative,decimal
JRu,negative,binary
JRu,negative,form feed
JRu,negative,fixme old mac format strings ?
JRu,negative,if we have a specific arity helper to construct an array for us use that
JRu,negative,horizontal tab
JRu,negative,where we started this marker match
JRu,negative,space
JRu,negative,vertical tab
JRu,negative,hex constant
JRu,negative,alarm bell
JRu,negative,fixme old mac format strings ?
JRu,negative,we use offset here to keep track of extra newlines for windows
JRu,negative,escape
JRu,negative,if r n then just pass along n windows if r n then pass along n mac
JRu,negative,line 
JRu,negative,do nothing return dummy version below
JRu,negative,keep value of twoago around so we can restore after we unread
JRu,negative,pop
JRu,negative,character read before previous read
JRu,negative,index of last character in pushback buffer
JRu,negative,newline
JRu,negative,bigdecimallibrary
JRu,negative,todo fd cloexec is mysterious and we are not sure how constantine should include this we did it here for now
JRu,negative,netprotocolbufferediolibrary
JRu,negative,line 
JRu,negative,that is what jdk produces on windows vista
JRu,negative,our shell scripts pass in non canonicalized paths but even if we did not anyone who did would become unhappy because ruby apps expect no relative operators in the pathname rubygems for example
JRu,negative,digestlibrary
JRu,negative,this set is only for darwin
JRu,negative,single node in list
JRu,negative,all errors just info do not prevent unloading ikvm does not support jmx and throws an error
JRu,negative,all errors just info do not prevent loading ikvm does not support jmx and throws an error
JRu,negative,line 
JRu,negative,line 
JRu,negative,else default reduce yyn
JRu,negative,discarding a token does not change stack
JRu,negative,dynamically increase
JRu,negative,yygindex 
JRu,negative,line 
JRu,negative,reduce yyn
JRu,negative,leave stack alone
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yygindex 
JRu,negative,line 
JRu,negative,chain to the next segment of this giant method
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,temp locals must start after last real local
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yydefred 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,temp locals must start after last real local
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,not an expression do not want result pop it
JRu,negative,line 
JRu,negative,should positions added extra ide friendly information and leave in all newline nodes
JRu,negative, null ? nilimplicitnode nil 
JRu,negative,line 
JRu,negative,yysindex 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,fill in all vars with nil so compiler is happy about future accesses
JRu,negative,popen caller wants to be able to write provide subprocess out directly
JRu,negative,try to mine out a ruby frame using our list of interpreter entry point markers
JRu,negative,line 
JRu,negative, null ? nilimplicitnode nil 
JRu,negative,jruby inherit threadgroup or use default
JRu,negative,yygindex 
JRu,negative,xxx 
JRu,negative,force for args
JRu,negative,last expression should not be void
JRu,negative,compstmt position includes both parens around it
JRu,negative,
JRu,negative,self
JRu,negative,yysindex 
JRu,negative,ignore no debugger present
JRu,negative,we parse evals more often in source so assume an eval parse
JRu,negative, 
JRu,negative,we only close out if it is the slave stream to avoid closing a directly mapped stream from parent process
JRu,negative,line defaultrubyparser y
JRu,negative,line 
JRu,negative,setposfrom 
JRu,negative,strnode some text
JRu,negative,finally post args
JRu,negative,dstrnode some text some expression
JRu,negative,line 
JRu,negative,sequential
JRu,negative,xxx
JRu,negative,is this inline source aka e source
JRu,negative,yyparse lexer new jay yydebug yyanim jruby 
JRu,negative,line 
JRu,negative,declare locals for java debugging purposes
JRu,negative,local scopes are argument scopes by default
JRu,negative,? u boolean true if file has the setuid bit set
JRu,negative,what linenumber will the source think it starts from ?
JRu,negative,load all arguments straight through
JRu,negative,odd but it is odd in ruby too
JRu,negative,include pipes on multiple arg type
JRu,negative,enebo has curr nodes for local block variables we do not i believe we follow proper logic
JRu,negative,case classnode case colon node handleuselesswarn node return
JRu,negative,fixme temporarily disabling because this fires way too much running rails tests jruby 
JRu,negative,parser states
JRu,negative,not an expression do not want result pop it
JRu,negative,end marker offset means none present
JRu,negative,will parser parse duby grammar extensions
JRu,negative,yydgoto 
JRu,negative,should we display extra debug information while parsing ?
JRu,negative,assumption tail is never a list node
JRu,negative,is the parser currently within a method definition
JRu,negative,instance variable
JRu,negative,constant
JRu,negative,reduces overhead in interp by not set position every single line we encounter
JRu,negative,mri block append
JRu,negative,fixme temporarily disabling because this fires way too much running rails tests jruby 
JRu,negative,node
JRu,negative,case constnode handleuselesswarn node a constant return
JRu,negative,do not add an empty string node
JRu,negative,foo
JRu,negative,localvar
JRu,negative,yydgoto 
JRu,negative,mri range op
JRu,negative,fixme dstr evstr str warning string literal in condition
JRu,negative,case selfnode handleuselesswarn node self return
JRu,negative,tail must be evstrnode at this point
JRu,negative,grab nil for local variables
JRu,negative,foo
JRu,negative,yylhs 
JRu,negative,? d boolean true if file exists and is a directory
JRu,negative,yydgoto 
JRu,negative,yylhs 
JRu,negative,yylhs 
JRu,negative,yydefred 
JRu,negative,yydgoto 
JRu,negative,yylen 
JRu,negative,now logic for each optional value
JRu,negative,yydefred 
JRu,negative,yydgoto 
JRu,negative,yydefred 
JRu,negative,then optional args
JRu,negative,boolean
JRu,negative,yyrindex 
JRu,negative,else default reduce yyn
JRu,negative,line 
JRu,negative,line 
JRu,negative,receiver
JRu,negative,yysindex 
JRu,negative,otherwise no items left available use the code for default
JRu,negative,yysindex 
JRu,negative,yysindex 
JRu,negative,yygindex 
JRu,negative,yyrindex 
JRu,negative,yygindex 
JRu,negative,yyrindex 
JRu,negative,grab nil for local variables
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,leave stack alone
JRu,negative,shift to yyn
JRu,negative,reduce yyn
JRu,negative,arities
JRu,negative,line 
JRu,negative,line 
JRu,negative,spurious wakeup loop
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,yylen 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,otherwise no items left available use the code for default
JRu,negative,yysindex 
JRu,negative,if there is args left and we want them assign to rest arg
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,next iterate over all optional args until no more arguments
JRu,negative,line 
JRu,negative,line 
JRu,negative,eval value for assignment
JRu,negative,adapter tc recv args block 
JRu,negative,yydefred 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,assign remaining elements as an array for rest args or empty array
JRu,negative,now logic for each optional value
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,evaluate and save receiver and args
JRu,negative,line 
JRu,negative,line 
JRu,negative,get call site and thread context
JRu,negative,line 
JRu,negative,prepare labels for opt logic
JRu,negative,line 
JRu,negative,evaluate and save receiver and args
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,prepare labels for opt logic
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,do nothing
JRu,negative,do nothing
JRu,negative,line 
JRu,negative,line 
JRu,negative,yylen 
JRu,negative,do nothing arity check is done before call
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,arg 
JRu,negative,arg 
JRu,negative,line 
JRu,negative,index for the item
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,just confirm minimum args provided
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,expression based tests bodies
JRu,negative,normal case create a new label
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,checkcast the value if match fast path otherwise proceed to slow logic
JRu,negative,line 
JRu,negative,line 
JRu,negative,todo assuming case is a fixnum
JRu,negative,line 
JRu,negative,receiver first so we know which call site to use
JRu,negative,args
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,we have an input case prepare branching logic
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,index for the item
JRu,negative,line 
JRu,negative,line 
JRu,negative,rb str hash cmp
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative, null ? nilimplicitnode nil 
JRu,negative,zero length array
JRu,negative,line 
JRu,negative,line 
JRu,negative,setposfrom 
JRu,negative, null ? nilimplicitnode nil 
JRu,negative,line 
JRu,negative,build ir for args
JRu,negative,otherwise there is a receiver so we pass that in directly for the sclass logic
JRu,negative,evstrnode some expression
JRu,negative,strnode some text
JRu,negative,dstrnode some text some expression
JRu,negative,line 
JRu,negative,build each when
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,string fragment we optimistically take one off in
JRu,negative,original exception is on stack
JRu,negative,prepare to call class definition method
JRu,negative,parsersupport literal concat check token length
JRu,negative,here starts the logic for the class definition
JRu,negative,finally with exception
JRu,negative,class body
JRu,negative,yyparse lexer new jay yydebug yyanim jruby 
JRu,negative,returns slot of variable
JRu,negative,self
JRu,negative,line ruby parser y
JRu,negative,unframed invokers have no ruby frames so pull from class name but use current frame as file and line
JRu,negative,ignore no debugger present
JRu,negative,enebo arg surrounded by in defined set unset
JRu,negative,list of active dynamic scopes each of these may have captured other dynamic scopes to implement closures
JRu,negative,enebo removed compile for eval which probably is to reduce warnings
JRu,negative,was null
JRu,negative,mark as captured if from containing scope
JRu,negative,raiseexception is on stack get rubyexception out
JRu,negative,line 
JRu,negative,index of variable that represents a rest arg
JRu,negative,next cref down the lexical structure
JRu,negative,number of variables in this scope representing optional arguments
JRu,negative,live reference to module
JRu,negative,no bit math to store level since we know level is zero for this case
JRu,negative,our name holder offsets are assigned as variables are added
JRu,negative,number of variables in this scope representing required arguments
JRu,negative,arg 
JRu,negative,note only used by compiler until it can use getconstant again or use some other refactoring
JRu,negative,require in all libraries specified on command line
JRu,negative,private unsynchronizedstack framestack
JRu,negative,source extensions
JRu,negative,returns slot of variable
JRu,negative,we override that the logic which uses this
JRu,negative,try and unload the autoload specified from internedname
JRu,negative,long name option
JRu,negative,this while loop is for restarting the block call in case a  redo  fires
JRu,negative,switch
JRu,negative,do nothing allow loop to redo
JRu,negative,assert internedname internedname intern internedname is not interned
JRu,negative,private unsynchronizedstack parentstack
JRu,negative,initialize builtin libraries
JRu,negative,if we have multiple asgn with just args need a special type for that
JRu,negative,new instance to invoke run against
JRu,negative,line 
JRu,negative,mark as captured if from containing scope
JRu,negative,is this thread currently with in a function trace ?
JRu,negative,is this thread currently doing an defined ? defined should set things like
JRu,negative,a  next  is like a local return from the block ending this call or yield
JRu,negative,line 
JRu,negative,receiver
JRu,negative,line 
JRu,negative,line 
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,framed invokers will have ruby frames associated with them
JRu,negative,switch
JRu,negative,if it is not a rescue or ensure there is a frame associated so decrement
JRu,negative,switch
JRu,negative,switch
JRu,negative,toplevel self and a few others want a top level scope we create this one right away and then pass it into top level parse so it ends up being the top level
JRu,negative,file where current executing unit is being evaluated
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,line where current executing unit is being evaluated
JRu,negative,catch management
JRu,negative,switch
JRu,negative,look for mangling markers for compiled ruby in method name
JRu,negative,switch
JRu,negative,if root of method is rescue build as a light rescue
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,frame management
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,self
JRu,negative,switch
JRu,negative,switch
JRu,negative,switch
JRu,negative,assert level 
JRu,negative,switch
JRu,negative,line 
JRu,negative,assert level 
JRu,negative,switch
JRu,negative,switch
JRu,negative,look for file method name for compiled roots
JRu,negative,look for mangling markers for bound unframed methods in class name
JRu,negative,line 
JRu,negative,all entries following removed node can stay in list but all preceding ones need to be cloned
JRu,negative,do nothing allow loop to redo
JRu,negative,switch
JRu,negative,required and optional only
JRu,negative,switch
JRu,negative,switch
JRu,negative,line 
JRu,negative,line 
JRu,negative,arg 
JRu,negative,line 
JRu,negative,popen callers wants to be able to read provide subprocess in directly
JRu,negative,frame matches one of our markers for interpreted calls
JRu,negative,line 
JRu,negative,rest arg must be splatted
JRu,negative,args getmaxargumentscount 
JRu,negative,popen callers wants to be able to read provide subprocess in directly
JRu,negative,try to load from classpath without prefix a b rb will not load as a b rb in a jar file
JRu,negative,line 
JRu,negative,just push the same empty scope since we wo not use one
JRu,negative,frame is extraneous runtime information skip it unless debug
JRu,negative,no argument blocks
JRu,negative,new scope for this invocation of the block based on parent scope
JRu,negative,assert false can this happen ?
JRu,negative,binary typed calls
JRu,negative,highest reserved id
JRu,negative,set self to the class
JRu,negative,this should only be called by subclasses this to handle unusedblock
JRu,negative,not sure if this is actually possible but better safe than sorry
JRu,negative,line 
JRu,negative,with block literal iter
JRu,negative,id must always be even
JRu,negative,static scope
JRu,negative,no block
JRu,negative,with block pass
JRu,negative,yydgoto 
JRu,negative,try count specific args to determine required
JRu,negative,static scoping information for this scope
JRu,negative,instance variable methods
JRu,negative,fast and safe respond to ? call site logic
JRu,negative,ensure zero is devoted to no method name
JRu,negative,no binding scope so we should create one
JRu,negative,captured dynamic scopes
JRu,negative,lastline
JRu,negative,helper function to give a good view of current dynamic scope with captured scopes
JRu,negative,populate up to shorter of calling arguments or local parameters in the block
JRu,negative,silently ignore
JRu,negative,initialize the static settings to determine which factory to use
JRu,negative,updating position for same line skip
JRu,negative,used by compiler
JRu,negative,line 
JRu,negative,backref for etc
JRu,negative,we need to guarantee that any existing reads of old map can proceed so we cannot yet null out each bin
JRu,negative,note in ruby all of this logic can go away since they will require explicit bindings for evals
JRu,negative,some helper functions
JRu,negative,single node on list
JRu,negative,clone all remaining nodes
JRu,negative,reuse trailing consecutive sequence at same slot
JRu,negative,populate up to shorter of calling arguments or local parameters in the block
JRu,negative,we only define one special dynamic scope per  logical  binding so all bindings for the same scope should share the same dynamic scope this allows multiple evals with different different bindings in the same scope to see the same stuff
JRu,negative,line 
JRu,negative,line 
JRu,negative,no extra args for rest
JRu,negative,prefill ?
JRu,negative,line 
JRu,negative,nil pad since we provided less values than block parms
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,nil pad since we provided less values than block parms
JRu,negative,class bodies prepare their own dynamic scope so let it do that
JRu,negative,line 
JRu,negative,conversion
JRu,negative,nil pad since we provided less values than block parms
JRu,negative,here starts the logic for the class definition
JRu,negative,this is the proper behavior for all non expanded assigners
JRu,negative,line 
JRu,negative,this is the proper behavior for all non expanded assigners which have a pre the rest override this
JRu,negative,extra args for rest
JRu,negative,receiver
JRu,negative,if undefined branch to method missing
JRu,negative,caller
JRu,negative,call is ok punch it
JRu,negative,fastinvocationcallback
JRu,negative,retrieve method module name
JRu,negative,class body
JRu,negative,invoke callmethodmissing
JRu,negative,method object already present push various args tc self klazz name
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,prefill ?
JRu,negative,if it is method missing just invoke it
JRu,negative,enebo perhaps slow but simple for now
JRu,negative,load arity for check
JRu,negative,calltype block
JRu,negative,invocationcallbackfactory
JRu,negative,if no exception raised jump to end to leave result on stack for return
JRu,negative,load arity for error
JRu,negative,if reciever is self then we do the call the same way as vcall
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string
JRu,negative,from dup setup
JRu,negative,dumpinginvocationcallbackfactory
JRu,negative,if already inspecting there is no need to register unregister again
JRu,negative,rb ary new 
JRu,negative,d
JRu,negative,invocationcallback
JRu,negative,only fill if there actually will remain trailing storage
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,arity ok continue
JRu,negative,for fast lookup org joni encoding encoding org jruby rubyencoding
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string
JRu,negative,load the encoding
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,throw
JRu,negative,irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string irubyobject
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string irubyobject
JRu,negative,line 
JRu,negative,line 
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,receiver
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,return a meta object corresponding to the class
JRu,negative,make java class files in the jar reachable from ruby
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,breakjump cacheentry threadcontext irubyobject irubyobject
JRu,negative,if we  re running in compat mode add ruby libs to path before libs
JRu,negative,irubyobject cacheentry threadcontext irubyobject irubyobject string args
JRu,negative,line 
JRu,negative,threadcontext
JRu,negative,breakjump threadcontext
JRu,negative,source extensions
JRu,negative,add all startup load paths to the list first
JRu,negative,line 
JRu,negative,empty paths do not need to be added
JRu,negative,signed short big endian
JRu,negative,add rubylib paths
JRu,negative,add libs
JRu,negative,wrap in try catch for security exceptions in an applet
JRu,negative,if it is a compiled jruby script instantiate and run it
JRu,negative,if a source extension is specified try all source extensions
JRu,negative,line 
JRu,negative,create package name by splitting on and joining all but the last elements with a and downcasing them
JRu,negative,if an extension is specified try more targetted searches
JRu,negative,no library or extension found try to load directly as a class
JRu,negative,library has already been loaded in some form bail out
JRu,negative,if there is a jar file with the required name we add this to the class path
JRu,negative,quietly try to load the class
JRu,negative,this code exploits the fact that all jar files will be found for the jarredscript feature this is where the basic extension mechanism gets fixed
JRu,negative,trim extension to try other options
JRu,negative,line 
JRu,negative,it is really expensive to check that the class actually exists in the jar so we do not do that now
JRu,negative,value
JRu,negative,try all extensions
JRu,negative,unknown extension fall back to search with extensions
JRu,negative,extension extensions
JRu,negative,end suffix iteration
JRu,negative,try only literal search
JRu,negative,if a jar or file url return load service resource directly without further searching
JRu,negative,unknown extension fall back to exact search
JRu,negative,should invoke seek on realio
JRu,negative,remove any relative prefix e g foo bar becomes foo bar
JRu,negative,hmm
JRu,negative,allow mainexitexception to propagate out for exec and friends
JRu,negative,otherwise load the library we  ve found
JRu,negative,if given path is absolute just try it as is with extensions and no load path
JRu,negative,if it is a basename use cwd logic
JRu,negative,if name starts with a we  re done classloader resources wo not load with an initial
JRu,negative,check if it is true ending if so
JRu,negative,args
JRu,negative,if entry is an empty string skip it
JRu,negative,it is an absolute path use it as is
JRu,negative,num int is also implemented
JRu,negative,we check length for  load  which does not use load path
JRu,negative,write `i  instance var signet if class is not a direct subclass of object
JRu,negative,handle security sensitive case
JRu,negative,prepend if is not already there since we  re loading based on cwd
JRu,negative,prepend if is not already there since we  re loading based on cwd
JRu,negative,it is an absolute path use it as is
JRu,negative,line 
JRu,negative,line 
JRu,negative,otherwise try to load from classpath note jar resources always uses    
JRu,negative,line 
JRu,negative,make sure this is not a directory or unavailable in some way
JRu,negative,signed short native
JRu,negative,copy and splat arguments out of the scope to use for zsuper call
JRu,negative,write is 
JRu,negative,end loop
JRu,negative,flush afer whole dump is complete
JRu,negative,object has instance vars and is not a class get a snapshot to be marshalled and output the ivar header here
JRu,negative,directories and unavailable resources are not able to open a stream
JRu,negative,line 
JRu,negative,object is a custom class that extended one of the native types other than object
JRu,negative,only accept an open brace if there is a close
JRu,negative,copy and splat arguments out of the scope to use for zsuper call
JRu,negative,rest arg must be splatted
JRu,negative,need to initialize
JRu,negative,call the proc but not for symbols
JRu,negative,copy and splat arguments out of the scope to use for zsuper call
JRu,negative,w unique
JRu,negative,if we  re not the argument scope for zsuper try our parent
JRu,negative,all c marshalled objects descend from core classes which are all rubyobject
JRu,negative,any ivars since we do not have attached ivar now
JRu,negative,major minor
JRu,negative,if we  re not the argument scope for zsuper try our parent
JRu,negative,line 
JRu,negative,sic
JRu,negative,if we  re not the argument scope for zsuper try our parent
JRu,negative,xxx xffff on be ?
JRu,negative,unsigned short native
JRu,negative,line 
JRu,negative,int native long native
JRu,negative,rubysignal
JRu,negative,cld is also 
JRu,negative,process is example dir glob jruby jython readme
JRu,negative,rest arg must be splatted
JRu,negative,all braces pushed
JRu,negative,foo are not getting set from somewhere i want the following assert to be true though assert variablevalues offset null getting unassigned staticscope getvariables offset
JRu,negative,look for slash starting from istart  position until  end 
JRu,negative,rest arg must be splatted
JRu,negative,copy and splat arguments out of the scope to use for zsuper call
JRu,negative,foo are not getting set from somewhere i want the following assert to be true though assert variablevalues offset null getting unassigned staticscope getvariables offset
JRu,negative,fields should really be an immutable map as it is never modified after construction
JRu,negative,traverse the instructions in this basic block in reverse order mark as dead all instructions whose results are not used
JRu,negative,foo are not getting set from somewhere i want the following assert to be true though assert variablevalues offset null getting unassigned staticscope getvariables offset
JRu,negative,sunsignalfacade
JRu,negative,load self object as irubyobject for recv param
JRu,negative,line 
JRu,negative,line 
JRu,negative,line 
JRu,negative,modify the block with a new backref lastline grabbing scope
JRu,negative,iot is also 
JRu,negative,line 
JRu,negative,hashdef object a hash with a default
JRu,negative,assign remaining elements as an array for rest args or empty array
JRu,negative,skip inner braces
JRu,negative,new exception printstacktrace
JRu,negative,failed try next recursion
JRu,negative,helper methods
JRu,negative,line 
JRu,negative,try to use posix for this first
JRu,negative,no or mismatched braces move along nothing to see here
JRu,negative,retuns null when not found to avoid unnecessary getruntime getnil call
JRu,negative,line 
JRu,negative,returns the stored value without processing undefs autoloads
JRu,negative,otherwise fall back on the old way
JRu,negative,are we at    
JRu,negative,lefttoken made us start as nest 
JRu,negative,single precision little endian
JRu,negative,not reached here
JRu,negative,index of left most brace index of right most brace
JRu,negative,this is not an expression that computes anything
JRu,negative,ignore we  re on the way out
JRu,negative,constructor
JRu,negative,not reached here
JRu,negative,pickaxe says must be followed by a name character but mri does not require this
JRu,negative,not reached here
JRu,negative,line 
JRu,negative,b xtable for decoding base 
JRu,negative,simplesampler
JRu,negative,ruby class methods
JRu,negative,pickaxe says must be followed by a name character but mri does not require this
JRu,negative,complete according to posix 
JRu,negative,get index of last read byte
JRu,negative,long little endian
JRu,negative,double precision big endian
JRu,negative,obtain b
JRu,negative,double precision little endian
JRu,negative,prepare to call def utility method to handle def logic
JRu,negative,single precision native
JRu,negative,single precision big endian
JRu,negative,arg 
JRu,negative,unsigned char
JRu,negative,signed char
JRu,negative,signed short little endian
JRu,negative, bit number native as fixnum
JRu,negative,possible checksum byte
JRu,negative,unsigned int native
JRu,negative,int native
JRu,negative,see if we have a converter for the job
JRu,negative,? last status
JRu,negative,pid
JRu,negative,otherwise the unpack should be here
JRu,negative,used only by the compiler interpreter will set the literal flag
JRu,negative,normal exit this should be faster than a test at each iterations for string with more than about char
JRu,negative,break out if we  ve dug as deep as we can
JRu,negative,ignore and try windows version
JRu,negative, 
JRu,negative,encode limit
JRu,negative, 
JRu,negative,skip embedded comments in pack format string
JRu,negative, 
JRu,negative, ?
JRu,negative, 
JRu,negative,root fiber
JRu,negative, 
JRu,negative,we encountered when were reading the buffer above increment the number of read bytes
JRu,negative, 
JRu,negative,determine how many of type are needed default 
JRu,negative,if the low bit is set set the high bit of the result
JRu,negative, z  adds extra null pad versus  a 
JRu,negative,line 
JRu,negative,if the index is not a multiple of we are not on a byte boundary shift the byte
JRu,negative,yysindex 
JRu,negative,do some padding i do not understand the padding strategy
JRu,negative,snip off ruby or jruby command from list of arguments leave alone if the command is the name of a script
JRu,negative,if the index is not a multiple of we are not on a byte boundary
JRu,negative,we filled up current byte append it and create next one
JRu,negative,we do not deal with negatives
JRu,negative,default pidgetter
JRu,negative,populate commandline with ng provided stuff
JRu,negative,this test may be too lax but it is the same as in mri
JRu,negative,break out if we  ve dug as deep as we can
JRu,negative,ignore and use hashcode
JRu,negative,just unix
JRu,negative,ignore and use hashcode
JRu,negative,ignore and use hashcode
JRu,negative,ignore and use hashcode
JRu,negative,z
JRu,negative,direct invocation of the command
JRu,negative,include its parent and in turn that module is parents
JRu,negative,single string command pass to sh to expand wildcards
JRu,negative,just windows
